<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Android开发之限制EditText的长度（中英文或者其他国家文字混编）</title>
      <link href="/2018/08/07/Android%E5%BC%80%E5%8F%91%E4%B9%8B%E9%99%90%E5%88%B6EditText%E7%9A%84%E9%95%BF%E5%BA%A6%EF%BC%88%E4%B8%AD%E8%8B%B1%E6%96%87%E6%88%96%E8%80%85%E5%85%B6%E4%BB%96%E5%9B%BD%E5%AE%B6%E6%96%87%E5%AD%97%E6%B7%B7%E7%BC%96%EF%BC%89/"/>
      <url>/2018/08/07/Android%E5%BC%80%E5%8F%91%E4%B9%8B%E9%99%90%E5%88%B6EditText%E7%9A%84%E9%95%BF%E5%BA%A6%EF%BC%88%E4%B8%AD%E8%8B%B1%E6%96%87%E6%88%96%E8%80%85%E5%85%B6%E4%BB%96%E5%9B%BD%E5%AE%B6%E6%96%87%E5%AD%97%E6%B7%B7%E7%BC%96%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在开发中难免会碰到限制EditText长的的需求，最简单的做法就是设置maxLength属性，但是这个是不准确的，他的计算方式是按照字符数，算的，但是现实使用中，同样字符长度的汉字是比英文或者字符要长的，所以要按照是否中文和英文或者混排，来限制长度，一般汉字按照两个来计算的。Android里边使用自定义InputFilter来实现，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomCoinNameFilter</span> <span class="keyword">implements</span> <span class="title">InputFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxLength;<span class="comment">//最大长度，ASCII码算一个，其它算两个</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomCoinNameFilter</span><span class="params">(<span class="keyword">int</span> maxLength)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxLength = maxLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharSequence <span class="title">filter</span><span class="params">(CharSequence source, <span class="keyword">int</span> start, <span class="keyword">int</span> end, Spanned dest, <span class="keyword">int</span> dstart, <span class="keyword">int</span> dend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(source)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LogUtils.e(<span class="string">"source:"</span> + source);</span><br><span class="line">        LogUtils.e(<span class="string">"dest:"</span> + dest);</span><br><span class="line">        <span class="keyword">int</span> inputCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> destCount = <span class="number">0</span>;</span><br><span class="line">        inputCount = getCurLength(source);</span><br><span class="line">        LogUtils.e(<span class="string">"inputCount:"</span> + inputCount);</span><br><span class="line">        <span class="keyword">if</span> (dest.length() != <span class="number">0</span>)</span><br><span class="line">            destCount = getCurLength(dest);</span><br><span class="line">        LogUtils.e(<span class="string">"destCount:"</span> + destCount);</span><br><span class="line">        <span class="keyword">if</span> (destCount &gt;= maxLength)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> count = inputCount + destCount;</span><br><span class="line">            <span class="keyword">if</span> (dest.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count &lt;= maxLength)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> sub(source, maxLength);</span><br><span class="line">            &#125;</span><br><span class="line">            LogUtils.e(<span class="string">"count:"</span> + count);</span><br><span class="line">            <span class="keyword">if</span> (count &gt; maxLength) &#123;</span><br><span class="line">                <span class="comment">//int min = count - maxLength;</span></span><br><span class="line">                <span class="keyword">int</span> maxSubLength = maxLength - destCount;</span><br><span class="line">                <span class="keyword">return</span> sub(source, maxSubLength);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CharSequence <span class="title">sub</span><span class="params">(CharSequence sq, <span class="keyword">int</span> subLength)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> needLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sq.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sq.charAt(i) &lt; <span class="number">128</span>)</span><br><span class="line">                length += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                length += <span class="number">2</span>;</span><br><span class="line">            ++needLength;</span><br><span class="line">            <span class="keyword">if</span> (subLength &lt;= length) &#123;</span><br><span class="line">                <span class="keyword">return</span> sq.subSequence(<span class="number">0</span>, needLength);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sq;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getCurLength</span><span class="params">(CharSequence s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> length;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) &lt; <span class="number">128</span>)</span><br><span class="line">                    length += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    length += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mSetWalletName.setFilters(<span class="keyword">new</span> InputFilter[]&#123;<span class="keyword">new</span> CustomCoinNameFilter(<span class="number">20</span>)&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Android问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android开发 </tag>
            
            <tag> Android问题解决 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链开发之BTC消息签名和消息验证</title>
      <link href="/2018/08/03/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8BBTC%E6%B6%88%E6%81%AF%E7%AD%BE%E5%90%8D%E5%92%8C%E6%B6%88%E6%81%AF%E9%AA%8C%E8%AF%81/"/>
      <url>/2018/08/03/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8BBTC%E6%B6%88%E6%81%AF%E7%AD%BE%E5%90%8D%E5%92%8C%E6%B6%88%E6%81%AF%E9%AA%8C%E8%AF%81/</url>
      <content type="html"><![CDATA[<p>BTC的消息签名机制，是使用私钥对一段信息签名，然后使用公钥对此签名做校验，次机制可以作为验证消息真伪的手段，这里使用bitcoinj库实现的</p><blockquote><p>implementation ‘org.bitcoinj:bitcoinj-core:0.14.7’</p></blockquote><h1 id="对消息进行签名"><a href="#对消息进行签名" class="headerlink" title="对消息进行签名"></a>对消息进行签名</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> msg 要签名的信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">signMsg</span><span class="params">(@NonNull String msg, @NonNull String privateKey)</span> </span>&#123;</span><br><span class="line">       NetworkParameters networkParameters = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">if</span> (!BTC_TEST_NET)</span><br><span class="line">           networkParameters = MainNetParams.get();</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           networkParameters = TestNet3Params.get();</span><br><span class="line">       DumpedPrivateKey priKey = DumpedPrivateKey.fromBase58(networkParameters, privateKey);</span><br><span class="line">       ECKey ecKey = priKey.getKey();</span><br><span class="line">       <span class="keyword">return</span> ecKey.signMessage(msg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="验证签名消息"><a href="#验证签名消息" class="headerlink" title="验证签名消息"></a>验证签名消息</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signatureMsg 签名好的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubkey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verifyMessage</span><span class="params">(@NonNull String msg, @NonNull String signatureMsg, @NonNull String pubkey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        ECKey ecKey = ECKey.fromPublicOnly(Utils.HEX.decode(pubkey));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ecKey.verifyMessage(msg, signatureMsg);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">            result = <span class="keyword">false</span>;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> BTC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>获取ETH指定代币的余额</title>
      <link href="/2018/08/02/%E8%8E%B7%E5%8F%96ETH%E6%8C%87%E5%AE%9A%E4%BB%A3%E5%B8%81%E7%9A%84%E4%BD%99%E9%A2%9D/"/>
      <url>/2018/08/02/%E8%8E%B7%E5%8F%96ETH%E6%8C%87%E5%AE%9A%E4%BB%A3%E5%B8%81%E7%9A%84%E4%BD%99%E9%A2%9D/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>之前的文章介绍了获取eth余额的方法和离线签名的方法（指定代币的离线签名），今天就来介绍一下如何获取满足ERC20协议的代币余额的。</p><p>要想获取代币的余额，要通过rpc接口得到接口为：<strong>eth_call</strong></p><p><strong>参数</strong></p><p>1.object字段：</p><ul><li>from: 钱包地址</li><li>to: 代币地址（智能合约地址）</li><li>data：0x70a08231000000000000000000000000b60e8dd61c5d32be8058bb8eb970870f07233155</li></ul><blockquote><p><strong>data数据格式：最前边的“0x70a08231000000000000000000000000”是固定的，后边的是钱包地址（不带“0x”前缀）</strong></p></blockquote><p>2.QUANTITY|TAG，”latest”, “earliest” or “pending”</p><p>参数示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">params: [&#123;</span><br><span class="line">  &quot;from&quot;: &quot;0xb60e8dd61c5d32be8058bb8eb970870f07233155&quot;,</span><br><span class="line">  &quot;to&quot;: &quot;0xd46e8dd67c5d32be8058bb8eb970870f07244567&quot;,</span><br><span class="line">  &quot;data&quot;: &quot;0x70a08231000000000000000000000000b60e8dd61c5d32be8058bb8eb970870f072331555675&quot;</span><br><span class="line">&#125;,&quot;latest&quot;]</span><br></pre></td></tr></table></figure></p><p>请求示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Request</span><br><span class="line">curl -X POST --data &apos;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;eth_call&quot;,&quot;params&quot;:[&#123;see above&#125;],&quot;id&quot;:1&#125;&apos;</span><br><span class="line"></span><br><span class="line">// Result</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;:1,</span><br><span class="line">  &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">  &quot;result&quot;: &quot;0x&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>注：result字段的值，就是余额</p></blockquote>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> ETH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链开发之计算BTC的fee小费</title>
      <link href="/2018/08/02/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E8%AE%A1%E7%AE%97BTC%E7%9A%84fee%E5%B0%8F%E8%B4%B9/"/>
      <url>/2018/08/02/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E8%AE%A1%E7%AE%97BTC%E7%9A%84fee%E5%B0%8F%E8%B4%B9/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>btc的fee也是要经过计算得出的，而不是随便给的，它的计价方式是按照每笔交易的字节数收的，所以要先计算出你这比交易的fee，必须先计算出这笔交易可能的字节数，计算公式如下：</p><blockquote><p>148 x inputNum + 34 x outputNum + 10</p></blockquote><p>算出字节数后，再乘以rate（Satoshi/byte）,rate可以网上找接口获取</p><blockquote><p><strong>提示：所以为了转账少花手续费，最好把utxo列表根据余额从大到小做个排序</strong></p></blockquote><p>代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unSpentBTCList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rate sta/byte</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> -1发送的value超出了你的余额</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getFee</span><span class="params">(@NonNull List&lt;UnSpentBTC&gt; unSpentBTCList, <span class="keyword">long</span> value, <span class="keyword">int</span> rate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> fee = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">int</span> inputNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> totalMoney = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (UnSpentBTC us : unSpentBTCList) &#123;</span><br><span class="line">        inputNum++;</span><br><span class="line">        totalMoney += us.getSatoshis();</span><br><span class="line">        <span class="keyword">if</span> (totalMoney &gt; value) &#123;</span><br><span class="line">            fee = (<span class="number">148</span> * inputNum + <span class="number">34</span> * <span class="number">1</span> + <span class="number">10</span>) * rate;</span><br><span class="line">            <span class="keyword">if</span> (totalMoney == (value + fee))</span><br><span class="line">                <span class="keyword">return</span> fee;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (totalMoney &gt; (value + fee)) &#123;</span><br><span class="line">                fee = (<span class="number">148</span> * inputNum + <span class="number">34</span> * <span class="number">2</span> + <span class="number">10</span>) * rate;</span><br><span class="line">                <span class="keyword">if</span> (totalMoney &gt;= (value + fee))</span><br><span class="line">                    <span class="keyword">return</span> fee;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有的朋友可能还会需要算出，最大能够发送的钱数，我这里也给一下代码，仅做参考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unSpentBTCList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> totalMoney</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getMaxSendValue</span><span class="params">(List&lt;UnSpentBTC&gt; unSpentBTCList, <span class="keyword">long</span> totalMoney, <span class="keyword">int</span> rate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> fee = getFee(unSpentBTCList, totalMoney, rate);</span><br><span class="line">        <span class="keyword">if</span> (fee == -<span class="number">1</span>)</span><br><span class="line">            totalMoney -= <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/* long fee = getFee(unSpentBTCList, totalMoney, rate);</span></span><br><span class="line"><span class="comment">    if (fee == -1) &#123;</span></span><br><span class="line"><span class="comment">        totalMoney -= 100;</span></span><br><span class="line"><span class="comment">        getMaxSendValue(unSpentBTCList, totalMoney, rate);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">return</span> totalMoney;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> BTC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链开发之ETH离线签名和其代币离线签名</title>
      <link href="/2018/08/02/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8BETH%E7%A6%BB%E7%BA%BF%E7%AD%BE%E5%90%8D%E5%92%8C%E5%85%B6%E4%BB%A3%E5%B8%81%E7%A6%BB%E7%BA%BF%E7%AD%BE%E5%90%8D/"/>
      <url>/2018/08/02/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8BETH%E7%A6%BB%E7%BA%BF%E7%AD%BE%E5%90%8D%E5%92%8C%E5%85%B6%E4%BB%A3%E5%B8%81%E7%A6%BB%E7%BA%BF%E7%AD%BE%E5%90%8D/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>eth的离线签名没有btc那么繁琐，只需要设置好nonce，gasprice和gaslimit即可</p><p>eth离线签名<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 离线签名eth</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to//转账的钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nonce//获取到的交易次数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gasPrice</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gasLimit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value           //转账的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">signedEthTransactionData</span><span class="params">(String privateKey, String to, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, String value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (words == <span class="keyword">null</span> || words.size() != <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"please generateMnemonic first"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把十进制的转换成ETH的Wei, 1ETH = 10^18 Wei</span></span><br><span class="line">        BigDecimal realValue = Convert.toWei(value, Convert.Unit.ETHER);</span><br><span class="line">        RawTransaction rawTransaction = RawTransaction.createEtherTransaction(nonce, gasPrice, gasLimit, to, realValue.toBigIntegerExact());</span><br><span class="line">        <span class="comment">//手续费= (gasPrice * gasLimit ) / 10^18 ether</span></span><br><span class="line"></span><br><span class="line">        Credentials credentials = Credentials.create(privateKey);</span><br><span class="line">        <span class="comment">//使用TransactionEncoder对RawTransaction进行签名操作</span></span><br><span class="line">        <span class="keyword">byte</span>[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials);</span><br><span class="line">        <span class="comment">//        //转换成0x开头的字符串</span></span><br><span class="line">        <span class="keyword">return</span> Numeric.toHexString(signedMessage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>代币转账代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 离线签名eth</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> contractAddress//合约地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to//转账的钱包地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nonce//获取到的交易次数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> gasPrice</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> gasLimit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value                 //转账的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">signedEthContractTransactionData</span><span class="params">(String privateKey, String contractAddress, String to, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, Double value, Double decimal)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (words == <span class="keyword">null</span> || words.size() != <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"please generateMnemonic first"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//因为每个代币可以规定自己的小数位, 所以实际的转账值=数值 * 10^小数位</span></span><br><span class="line">    BigDecimal realValue = BigDecimal.valueOf(value * Math.pow(<span class="number">10.0</span>, decimal));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//0xa9059cbb代表某个代币的转账方法hex(transfer) + 对方的转账地址hex + 转账的值的hex</span></span><br><span class="line">    String data = <span class="string">"0xa9059cbb"</span> + Numeric.toHexStringNoPrefixZeroPadded(Numeric.toBigInt(to), <span class="number">64</span>) + Numeric.toHexStringNoPrefixZeroPadded(realValue.toBigInteger(), <span class="number">64</span>);</span><br><span class="line">    RawTransaction rawTransaction = RawTransaction.createTransaction(nonce, gasPrice, gasLimit, contractAddress, data);</span><br><span class="line">    <span class="comment">//手续费= (gasPrice * gasLimit ) / 10^18 ether</span></span><br><span class="line"></span><br><span class="line">    Credentials credentials = Credentials.create(privateKey);</span><br><span class="line">    <span class="comment">//使用TransactionEncoder对RawTransaction进行签名操作</span></span><br><span class="line">    <span class="keyword">byte</span>[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials);</span><br><span class="line">    <span class="comment">//转换成0x开头的字符串</span></span><br><span class="line">    <span class="keyword">return</span> Numeric.toHexString(signedMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> BTC </tag>
            
            <tag> ETH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链开发之BTC离线签名</title>
      <link href="/2018/08/02/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8BBTC%E7%A6%BB%E7%BA%BF%E7%AD%BE%E5%90%8D/"/>
      <url>/2018/08/02/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8BBTC%E7%A6%BB%E7%BA%BF%E7%AD%BE%E5%90%8D/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>btc的账户系统是基于utxo模式的（utxo具体解释，大家可以自行搜索），如何获取utxo列表，可以看我前篇文章：<a href="/2018/08/02/区块链开发之获取BTC，ETH的余额，BTC的UTXO列表，ETH的nonce/">区块链开发之获取BTC，ETH的余额，BTC的UTXO列表，ETH的nonce</a></p><p>获取到的数据格式大致如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"address"</span>:<span class="string">"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs"</span>,</span><br><span class="line">    <span class="string">"txid"</span>:<span class="string">"d5f8a96faccf79d4c087fa217627bb1120e83f8ea1a7d84b1de4277ead9bbac1"</span>,</span><br><span class="line">    <span class="string">"vout"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"scriptPubKey"</span>:<span class="string">"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac"</span>,</span><br><span class="line">    <span class="string">"amount"</span>:<span class="number">0.000006</span>,</span><br><span class="line">    <span class="string">"satoshis"</span>:<span class="number">600</span>,</span><br><span class="line">    <span class="string">"confirmations"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"ts"</span>:<span class="number">1461349425</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"address"</span>: <span class="string">"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs"</span>,</span><br><span class="line">    <span class="string">"txid"</span>: <span class="string">"bc9df3b92120feaee4edc80963d8ed59d6a78ea0defef3ec3cb374f2015bfc6e"</span>,</span><br><span class="line">    <span class="string">"vout"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"scriptPubKey"</span>: <span class="string">"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac"</span>,</span><br><span class="line">    <span class="string">"amount"</span>: <span class="number">0.12345678</span>,</span><br><span class="line">    <span class="string">"satoshis: 12345678,</span></span><br><span class="line"><span class="string">    "</span>confirmations<span class="string">": 1,</span></span><br><span class="line"><span class="string">    "</span>height<span class="string">": 300001</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure></p><p>具体代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">signBTCTransactionData</span><span class="params">(@NonNull List&lt;UnSpentBTC&gt; unSpentBTCList, @NonNull String from, @NonNull String to, @NonNull String privateKey, <span class="keyword">long</span> value, <span class="keyword">long</span> fee)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     NetworkParameters networkParameters = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">if</span> (!BTC_TEST_NET)</span><br><span class="line">         networkParameters = MainNetParams.get();</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         networkParameters = TestNet3Params.get();</span><br><span class="line"></span><br><span class="line">     Transaction transaction = <span class="keyword">new</span> Transaction(networkParameters);</span><br><span class="line">     DumpedPrivateKey dumpedPrivateKey = DumpedPrivateKey.fromBase58(networkParameters, privateKey);</span><br><span class="line"></span><br><span class="line">     ECKey ecKey = dumpedPrivateKey.getKey();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">long</span> totalMoney = <span class="number">0</span>;</span><br><span class="line">     List&lt;UTXO&gt; utxos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     <span class="comment">//遍历未花费列表，组装合适的item</span></span><br><span class="line">     <span class="keyword">for</span> (UnSpentBTC us : unSpentBTCList) &#123;</span><br><span class="line">         <span class="keyword">if</span> (totalMoney &gt;= (value + fee))</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         UTXO utxo = <span class="keyword">new</span> UTXO(Sha256Hash.wrap(us.getTxid()), us.getVout(), Coin.valueOf(us.getSatoshis()),</span><br><span class="line">                 us.getHeight(), <span class="keyword">false</span>, <span class="keyword">new</span> Script(Hex.decode(us.getScriptPubKey())));</span><br><span class="line">         utxos.add(utxo);</span><br><span class="line">         totalMoney += us.getSatoshis();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     transaction.addOutput(Coin.valueOf(value), Address.fromBase58(networkParameters, to));</span><br><span class="line">     <span class="comment">// transaction.</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//消费列表总金额 - 已经转账的金额 - 手续费 就等于需要返回给自己的金额了</span></span><br><span class="line">     <span class="keyword">long</span> balance = totalMoney - value - fee;</span><br><span class="line">     <span class="comment">//输出-转给自己</span></span><br><span class="line">     <span class="keyword">if</span> (balance &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         transaction.addOutput(Coin.valueOf(balance), Address.fromBase58(networkParameters, from));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//输入未消费列表项</span></span><br><span class="line">     <span class="keyword">for</span> (UTXO utxo : utxos) &#123;</span><br><span class="line">         TransactionOutPoint outPoint = <span class="keyword">new</span> TransactionOutPoint(networkParameters, utxo.getIndex(), utxo.getHash());</span><br><span class="line">         transaction.addSignedInput(outPoint, utxo.getScript(), ecKey, Transaction.SigHash.ALL, <span class="keyword">true</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> Hex.toHexString(transaction.bitcoinSerialize());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> BTC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链开发之获取BTC，ETH的余额，BTC的UTXO列表，ETH的nonce</title>
      <link href="/2018/08/02/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E8%8E%B7%E5%8F%96BTC%EF%BC%8CETH%E7%9A%84%E4%BD%99%E9%A2%9D%EF%BC%8CBTC%E7%9A%84UTXO%E5%88%97%E8%A1%A8%EF%BC%8CETH%E7%9A%84nonce/"/>
      <url>/2018/08/02/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E8%8E%B7%E5%8F%96BTC%EF%BC%8CETH%E7%9A%84%E4%BD%99%E9%A2%9D%EF%BC%8CBTC%E7%9A%84UTXO%E5%88%97%E8%A1%A8%EF%BC%8CETH%E7%9A%84nonce/</url>
      <content type="html"><![CDATA[<h1 id="获取eth的余额"><a href="#获取eth的余额" class="headerlink" title="获取eth的余额"></a>获取eth的余额</h1><p>先来说说eth的余额获取，这个是很简单的，直接通过节点的rpc接口，就可以获取到，具体使用到的RPC接口为：<strong>eth_getBalance</strong></p><h2 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h2><p>1.要查询钱包地址<br>2.查询不同状态的余额”latest”（已经确认了的）, “earliest”（创世区块的） ， “pending”（包含未确认的交易的余额）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">params: [</span><br><span class="line">   <span class="string">'0xc94770007dda54cF92009BFF0dE90c06F603a09f'</span>,</span><br><span class="line">   <span class="string">'latest'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Request</span><br><span class="line">curl -X POST --data &apos;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;eth_getBalance&quot;,&quot;params&quot;:[&quot;0xc94770007dda54cF92009BFF0dE90c06F603a09f&quot;, &quot;latest&quot;],&quot;id&quot;:1&#125;&apos;</span><br><span class="line"></span><br><span class="line">// Result</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;:1,</span><br><span class="line">  &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">  &quot;result&quot;: &quot;0x0234c8a3397aab58&quot; // 158972490234375000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取BTC的余额-和-UTXO列表"><a href="#获取BTC的余额-和-UTXO列表" class="headerlink" title="获取BTC的余额 和 UTXO列表"></a>获取BTC的余额 和 UTXO列表</h1><p>直接使用btc节点的rpc服务是很难查出某个地址的余额的，因为btc的utxo机制，想通过rpc服务查余额，就只能先把地址导入节点，节点扫描整个区块，维护本地utxo列表，然后才能查询余额，这需要耗费一定的时间（20分钟以上），所以这个方式根本不适合查询余额。最终只能自己搭建一个btc的区块链浏览器，来解决这个问题（同时也解决了获取utxo列表和查询历史记录的问题）。使用的比较广的btc浏览器应该是insight-api，它的代码是开源的，并且提供接口，github地址：<a href="https://github.com/bitpay/insight-api" target="_blank" rel="noopener">https://github.com/bitpay/insight-api</a></p><p>他提供的接口，足以满足你的需求</p><h1 id="获取eth的nonce"><a href="#获取eth的nonce" class="headerlink" title="获取eth的nonce"></a>获取eth的nonce</h1><p>估计有些人会有疑问，nonce是用来干啥的呢？其实他是eth用来防止双花的机制：</p><p>为了防止交易的重播攻击，每笔交易必须有一个nonce随机数，针对每一个账户nonce都是从0开始，当nonce为0的交易处理完之后，才会处理nonce为1的交易，并依次加1的交易才会被处理。以下是nonce使用的几条规则：</p><p>当nonce太小，交易会被直接拒绝。</p><p>当nonce太大，交易会一直处于队列之中；</p><p>当发送一个比较大的nonce值，然后补齐开始nonce到那个值之间的nonce，那么交易依旧可以被执行。</p><p>那如何获取这个nonce和防止交易失败呢，那就应该使用rpc接口获取，并且获取pending状态的值，具体rpc接口为：<strong>eth_getTransactionCount</strong></p><h2 id="参数：-1"><a href="#参数：-1" class="headerlink" title="参数："></a>参数：</h2><p>1.要查询钱包地址<br>2.查询不同状态的余额”latest”（已经确认了的）, “earliest”（创世区块的） ， “pending”（包含未确认的交易的次数，推荐使用这个）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">params: [</span><br><span class="line">   <span class="string">'0xc94770007dda54cF92009BFF0dE90c06F603a09f'</span>,</span><br><span class="line">   <span class="string">'latest'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Request</span><br><span class="line">curl -X POST --data &apos;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;eth_getTransactionCount&quot;,&quot;params&quot;:[&quot;0xc94770007dda54cF92009BFF0dE90c06F603a09f&quot;,&quot;latest&quot;],&quot;id&quot;:1&#125;&apos;</span><br><span class="line"></span><br><span class="line">// Result</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;:1,</span><br><span class="line">  &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">  &quot;result&quot;: &quot;0x1&quot; // 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> BTC </tag>
            
            <tag> ETH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链开发之验证ETH地址的有效性</title>
      <link href="/2018/08/01/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E9%AA%8C%E8%AF%81ETH%E5%9C%B0%E5%9D%80%E7%9A%84%E6%9C%89%E6%95%88%E6%80%A7/"/>
      <url>/2018/08/01/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E9%AA%8C%E8%AF%81ETH%E5%9C%B0%E5%9D%80%E7%9A%84%E6%9C%89%E6%95%88%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>之前介绍了eth私钥公钥地址的生成，接下来介绍一下eth地址有效性的校验，要做地址有效性的校验，首先要知道他的地址规则：</p><blockquote><p>eth的地址，就是把公钥用sha256hash之后，取其后160位生成的16进制字符串（40个字符）再加上前缀“0x”（总共42位）</p></blockquote><h1 id="校验流程"><a href="#校验流程" class="headerlink" title="校验流程"></a>校验流程</h1><p>第一步,先判断地址非空和是否0x开头</p><p>第二步，把16进制字符串转成10进制数，看是否能否转换成功</p><p>第三部，判断是否长度是40位（去掉0x）</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isETHValidAddress</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNull(input) || !input.startsWith(<span class="string">"0x"</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> WalletUtils.isValidAddress(input);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>isValidAddress方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValidAddress</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">    String cleanInput = Numeric.cleanHexPrefix(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Numeric.toBigIntNoPrefix(cleanInput);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cleanInput.length() == ADDRESS_LENGTH_IN_HEX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链开发之验证BTC地址的有效性</title>
      <link href="/2018/08/01/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E9%AA%8C%E8%AF%81BTC%E5%9C%B0%E5%9D%80%E7%9A%84%E6%9C%89%E6%95%88%E6%80%A7/"/>
      <url>/2018/08/01/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E9%AA%8C%E8%AF%81BTC%E5%9C%B0%E5%9D%80%E7%9A%84%E6%9C%89%E6%95%88%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>之前介绍了btc私钥公钥地址的生成，接下来介绍一下btc地址有效性的校验，要做地址有效性的校验，首先要知道他的地址生成规则：</p><p>第一步，随机选取一个32字节的数、大小介于1 ~ 0xFFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFE BAAE DCE6 AF48 A03B BFD2 5E8C D036 4141之间，作为私钥。<br>18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725</p><p>第二步，使用椭圆曲线加密算法（ECDSA-secp256k1）计算私钥所对应的非压缩公钥。 (共65字节， 1字节 0x04, 32字节为x坐标，32字节为y坐标）关于公钥压缩、非压缩的问题另文说明。</p><p>0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B<br>23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6</p><p>第三步，计算公钥的 SHA-256 哈希值<br>600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408</p><p>第四步，取上一步结果，计算 RIPEMD-160 哈希值<br>010966776006953D5567439E5E39F86A0D273BEE</p><p>第五步，取上一步结果，前面加入地址版本号（比特币主网版本号“0x00”）<br>00010966776006953D5567439E5E39F86A0D273BEE</p><p>第六步，取上一步结果，计算 SHA-256 哈希值<br>445C7A8007A93D8733188288BB320A8FE2DEBD2AE1B47F0F50BC10BAE845C094</p><p>第七步，取上一步结果，再计算一下 SHA-256 哈希值（哈哈）<br>D61967F63C7DD183914A4AE452C9F6AD5D462CE3D277798075B107615C1A8A30</p><p>第八步，取上一步结果的前4个字节（8位十六进制）<br>D61967F6</p><p>第九步，把这4个字节加在第五步的结果后面，作为校验（这就是比特币地址的16进制形态）。<br>00010966776006953D5567439E5E39F86A0D273BEED61967F6</p><p>第十步，用base58表示法变换一下地址（这就是最常见的比特币地址形态）。<br>16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM</p><h1 id="校验流程"><a href="#校验流程" class="headerlink" title="校验流程"></a>校验流程</h1><p>知道了生成流程，就好实现校验方法了。</p><p>第一步，先把地址base58解码成字节数组，然后把数组分成两个字节数组，一个是后4字节数组（字节数组1），一个是减去后4字节的数组（字节数组2），然后把字节数组2两次Sha256Hash，然后取其前4位，跟字节数组1比较，是相同的，就校验通过。</p><p>第二步，把第一步校验通过的解码字节数组取第一个字节&amp;0xff，得到版本号，然后检验版本号的合法性（这个是根据主网参数校验的）</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>这些代码bitcoinj里面已经有对应方法了，我们只需要封装一下就可以了，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBTCValidAddress</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        NetworkParameters networkParameters = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!BTC_TEST_NET)</span><br><span class="line">            networkParameters = MainNetParams.get();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            networkParameters = TestNet3Params.get();</span><br><span class="line">        Address address = Address.fromBase58(networkParameters, input);</span><br><span class="line">        <span class="keyword">if</span> (address != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链开发之确定性算法生成BTC，ETH的私钥，公钥和地址</title>
      <link href="/2018/07/30/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%AE%97%E6%B3%95%E7%94%9F%E6%88%90BTC%EF%BC%8CETH%E7%9A%84%E7%A7%81%E9%92%A5%EF%BC%8C%E5%85%AC%E9%92%A5%E5%92%8C%E5%9C%B0%E5%9D%80/"/>
      <url>/2018/07/30/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%AE%97%E6%B3%95%E7%94%9F%E6%88%90BTC%EF%BC%8CETH%E7%9A%84%E7%A7%81%E9%92%A5%EF%BC%8C%E5%85%AC%E9%92%A5%E5%92%8C%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>首先要生成12个助记词，请看我上篇文章：<a href="/2018/07/30/区块链开发之生成12个助记词/">区块链开发之生成12个助记词</a></p><h1 id="使用的库"><a href="#使用的库" class="headerlink" title="使用的库"></a>使用的库</h1><blockquote><p>implementation ‘org.bitcoinj:bitcoinj-core:0.14.7’</p><p>implementation ‘org.web3j:core:3.3.1-android’</p></blockquote><h1 id="具体代码如下"><a href="#具体代码如下" class="headerlink" title="具体代码如下"></a>具体代码如下</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ShellWallet <span class="title">generateWallet</span><span class="params">(<span class="keyword">int</span> coinType, <span class="keyword">int</span> index, String name)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ShellWallet wallet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (words == <span class="keyword">null</span> || words.size() != <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"please generateMnemonic first"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            DeterministicSeed deterministicSeed = <span class="keyword">new</span> DeterministicSeed(words, <span class="keyword">null</span>, <span class="string">""</span>, <span class="number">0</span>);</span><br><span class="line">            DeterministicKeyChain deterministicKeyChain = DeterministicKeyChain.builder().seed(deterministicSeed).build();</span><br><span class="line">            <span class="comment">//拼接路径 path = "m/44'/60'/0'/0/0"</span></span><br><span class="line">            String path = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (coinType == BTC_COIN) &#123;</span><br><span class="line">                path = <span class="string">"m/44'/0'/0'/0/"</span> + index;</span><br><span class="line">                NetworkParameters networkParameters = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (!BTC_TEST_NET) &#123;</span><br><span class="line">                    networkParameters = MainNetParams.get();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    networkParameters = TestNet3Params.get();</span><br><span class="line">                    path = <span class="string">"m/44'/1'/0'/0/"</span> + index;</span><br><span class="line">                &#125;</span><br><span class="line">                BigInteger privkeybtc = deterministicKeyChain.getKeyByPath(parsePath(path), <span class="keyword">true</span>).getPrivKey();</span><br><span class="line">                ECKey ecKey = ECKey.fromPrivate(privkeybtc);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//String publicKey = Numeric.toHexStringNoPrefixZeroPadded(new BigInteger(ecKey.getPubKey()), 66);</span></span><br><span class="line">                <span class="comment">//LogUtils.d("pub1:" + publicKey );</span></span><br><span class="line">                String publicKey = ecKey.getPublicKeyAsHex();</span><br><span class="line">                LogUtils.d(<span class="string">"pub2:"</span> + publicKey);</span><br><span class="line">                String privateKey = ecKey.getPrivateKeyEncoded(networkParameters).toString();</span><br><span class="line">                String address = ecKey.toAddress(networkParameters).toString();</span><br><span class="line"></span><br><span class="line">                wallet = <span class="keyword">new</span> ShellWallet(index, coinType, privateKey, publicKey, address, name);</span><br><span class="line">                LogUtils.d(wallet.toString());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (coinType == ETH_COIN) &#123;</span><br><span class="line">                path = <span class="string">"m/44'/60'/0'/0/"</span> + index;</span><br><span class="line">                BigInteger privkeyeth = deterministicKeyChain.getKeyByPath(parsePath(path), <span class="keyword">true</span>).getPrivKey();</span><br><span class="line">                ECKeyPair ecKeyPair = ECKeyPair.create(privkeyeth);</span><br><span class="line"></span><br><span class="line">                String publicKey = Numeric.toHexStringWithPrefix(ecKeyPair.getPublicKey());</span><br><span class="line">                String privateKey = Numeric.toHexStringWithPrefix(ecKeyPair.getPrivateKey());</span><br><span class="line">                String address = <span class="string">"0x"</span> + Keys.getAddress(ecKeyPair);</span><br><span class="line"></span><br><span class="line">                wallet = <span class="keyword">new</span> ShellWallet(index, coinType, privateKey, publicKey, address, name);</span><br><span class="line">                LogUtils.d(wallet.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wallet;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The path is a human-friendly representation of the deterministic path. For example:</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * "m/44'/0'/0'/0/0"</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Where a letter "'" means hardened key. Spaces are ignored.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;ChildNumber&gt; <span class="title">parsePath</span><span class="params">(@Nonnull String path)</span> </span>&#123;</span><br><span class="line">        String[] parsedNodes = path.replace(<span class="string">"m"</span>, <span class="string">""</span>).split(<span class="string">"/"</span>);</span><br><span class="line">        List&lt;ChildNumber&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String n : parsedNodes) &#123;</span><br><span class="line">            n = n.replaceAll(<span class="string">" "</span>, <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">if</span> (n.length() == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">boolean</span> isHard = n.endsWith(<span class="string">"'"</span>);</span><br><span class="line">            <span class="keyword">if</span> (isHard) n = n.substring(<span class="number">0</span>, n.length() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> nodeNumber = Integer.parseInt(n);</span><br><span class="line">            nodes.add(<span class="keyword">new</span> ChildNumber(nodeNumber, isHard));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链开发之生成12个助记词</title>
      <link href="/2018/07/30/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E7%94%9F%E6%88%9012%E4%B8%AA%E5%8A%A9%E8%AE%B0%E8%AF%8D/"/>
      <url>/2018/07/30/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E7%94%9F%E6%88%9012%E4%B8%AA%E5%8A%A9%E8%AE%B0%E8%AF%8D/</url>
      <content type="html"><![CDATA[<p>这里使用bitcoinj库，来实现生成bip39的12个助记词，引用库</p><blockquote><p>implementation ‘org.bitcoinj:bitcoinj-core:0.14.7’</p></blockquote><h1 id="填坑1"><a href="#填坑1" class="headerlink" title="填坑1"></a>填坑1</h1><p>如果你直接引用库之后，直接安装运行apk，会造成app崩溃，这是因为这个库里面有一个libscrypt.dylib，这个库是针对x86_64平台的，并且没有其他平台的这个库，所以在arm cpu平台的手机app会崩溃，解决方案就是在gradle的android节点下，加上以下配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">packagingOptions &#123;</span><br><span class="line">       exclude <span class="string">'lib/x86_64/darwin/libscrypt.dylib'</span></span><br><span class="line">       exclude <span class="string">'com/google/thirdparty/publicsuffix/PublicSuffixPatterns.gwt.xml'</span></span><br><span class="line">       exclude <span class="string">'com/google/thirdparty/publicsuffix/PublicSuffixType.gwt.xml'</span></span><br><span class="line">       exclude <span class="string">'org/bitcoinj/crypto/mnemonic/wordlist/english.txt'</span></span><br><span class="line">       exclude <span class="string">'org/bitcoinj/crypto/cacerts'</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h1 id="填坑2"><a href="#填坑2" class="headerlink" title="填坑2"></a>填坑2</h1><p>我们要得到12个随机的单词，就要用到里面的MnemonicCode类，但是这个类，默认会new一个实例出来，并且默认加载的单词库路径方式是不支持android的，官方代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         INSTANCE = <span class="keyword">new</span> MnemonicCode();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">         <span class="comment">// We expect failure on Android. The developer has to set INSTANCE themselves.</span></span><br><span class="line">         <span class="keyword">if</span> (!Utils.isAndroidRuntime())</span><br><span class="line">             log.error(<span class="string">"Could not find word list"</span>, e);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         log.error(<span class="string">"Failed to load word list"</span>, e);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Initialise from the included word list. Won't work on Android. */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MnemonicCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(openDefaultWords(), BIP39_ENGLISH_SHA256);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> InputStream <span class="title">openDefaultWords</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       InputStream stream = MnemonicCode.class.getResourceAsStream(BIP39_ENGLISH_RESOURCE_NAME);</span><br><span class="line">       <span class="keyword">if</span> (stream == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(BIP39_ENGLISH_RESOURCE_NAME);</span><br><span class="line">       <span class="keyword">return</span> stream;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以从代码中看出来，在android平台此路径是绝对不可用的，所以我们要手动自己new这个对象，使用public MnemonicCode(InputStream wordstream, String wordListDigest) throws IOException, IllegalArgumentException这个构造函数</p><h1 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a>具体实现代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateMnemonic</span><span class="params">(Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    MnemonicCode mnemonicCode = <span class="keyword">new</span> MnemonicCode(context.getAssets().open(<span class="string">"english.txt"</span>), <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    SecureRandom secureRandom = SecureRandomUtils.secureRandom();</span><br><span class="line">    <span class="keyword">byte</span>[] initialEntropy = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];<span class="comment">//算法需要，必须是被4整除</span></span><br><span class="line">    secureRandom.nextBytes(initialEntropy);</span><br><span class="line">    List&lt;String&gt; wd = mnemonicCode.toMnemonic(initialEntropy);</span><br><span class="line">    <span class="keyword">if</span> (wd == <span class="keyword">null</span> || wd.size() != <span class="number">12</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"generate word error"</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        words.clear();</span><br><span class="line">        words.addAll(wd);</span><br><span class="line">        LogUtils.d(words.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链开发之确定性算法bip32，bip39，bip44</title>
      <link href="/2018/07/30/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%AE%97%E6%B3%95bip32%EF%BC%8Cbip39%EF%BC%8Cbip44/"/>
      <url>/2018/07/30/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%AE%97%E6%B3%95bip32%EF%BC%8Cbip39%EF%BC%8Cbip44/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>随着比特币区块链的发展，人们已经不满足于，只有一个账号的情况，有些人会有好几个账户，但是这就出现一个问题，我有几个账号，就要保存几个私钥，这就特别麻烦和不友好，所以，就出现了bip32确定性算法，该算法可以让你只有同一个种子，就可以生成无数个私钥和地址，这就大大方便了用户的使用。但是这个种子，也不较长，用户使用起来也比较繁琐，这就出现了bip39，它是使用助记词的方式，生成种子的，这样用户只需要记住，12个单词（3,6,9,12，15,18,21，24支持这些单词数，目前使用较广泛的是12和24），这就有大大提高了用户使用的便利性。又随着区块链发展，市面上出现了很多币种，之前的确定性算法只是针对比特币的，也就是说只支持一种币种，用户想用同一个种子，管理不同币种，这就促使了bip39协议的出现，它是基于bip32协议的，它给bip32的路径，赋予了不同的意义，很好的解决了多币种，多地址的问题。</p><h1 id="协议官方链接"><a href="#协议官方链接" class="headerlink" title="协议官方链接"></a>协议官方链接</h1><p>如果想详细的了解这些协议，请查看官方文档（解析的最清楚）<br>big32：<a href="https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki" target="_blank" rel="noopener">https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki</a></p><p>bip39：<a href="https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki" target="_blank" rel="noopener">https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki</a></p><p>bip44：<a href="https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki" target="_blank" rel="noopener">https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki</a></p><p>验证网站：<a href="https://iancoleman.io/bip39/" target="_blank" rel="noopener">https://iancoleman.io/bip39/</a></p><h1 id="BIP44简介"><a href="#BIP44简介" class="headerlink" title="BIP44简介"></a>BIP44简介</h1><h2 id="路径级别"><a href="#路径级别" class="headerlink" title="路径级别"></a>路径级别</h2><p>bip44给bip32定义了5各级别</p><blockquote><p>m / purpose’ / coin_type’ / account’ / change / address_index</p></blockquote><p><strong>m是固定的</strong></p><p><strong>Purpose也是固定的，值为44（或者 0x8000002C）</strong></p><h2 id="Coin-type"><a href="#Coin-type" class="headerlink" title="Coin type"></a>Coin type</h2><p>这个代表的是币种，0代表比特币，1代表比特币测试链，60代表以太坊</p><p>完整的币种列表地址：<a href="https://github.com/satoshilabs/slips/blob/master/slip-0044.md" target="_blank" rel="noopener">https://github.com/satoshilabs/slips/blob/master/slip-0044.md</a></p><h2 id="Account"><a href="#Account" class="headerlink" title="Account"></a>Account</h2><p>代表这个币的账户索引，从0开始</p><h2 id="Change"><a href="#Change" class="headerlink" title="Change"></a>Change</h2><p>常量0用于外部链，常量1用于内部链（也称为更改地址）。外部链用于在钱包外可见的地址（例如，用于接收付款）。内部链用于在钱包外部不可见的地址，用于返回交易变更。 <strong>(所以一般使用0)</strong></p><h2 id="address-index"><a href="#address-index" class="headerlink" title="address_index"></a>address_index</h2><p>这就是地址索引，从0开始，代表生成第几个地址，<strong>并且官方建议，每个account下的address_index不要超过20</strong></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><table><thead><tr><th>coin</th><th>account</th><th>change</th><th>address</th><th>path</th></tr></thead><tbody><tr><td>Bitcoin</td><td>first</td><td>external</td><td>first</td><td>m / 44’ / 0’ / 0’ / 0 / 0</td></tr><tr><td>Bitcoin</td><td>first</td><td>external</td><td>second</td><td>m / 44’ / 0’ / 0’ / 0 / 1</td></tr><tr><td>Bitcoin</td><td>first</td><td>internal</td><td>second</td><td>m / 44’ / 0’ / 0’ / 1 / 1</td></tr><tr><td>Bitcoin Testnet</td><td>first</td><td>external</td><td>first</td><td>m / 44’ / 1’ / 0’ / 0 / 0</td></tr><tr><td>Bitcoin Testnet</td><td>second</td><td>external</td><td>first</td><td>m / 44’ / 1’ / 1’ / 0 / 0</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BTC,ETH测试币领取地址，以及对应区块浏览查询地址</title>
      <link href="/2018/07/27/BTC-ETH%E6%B5%8B%E8%AF%95%E5%B8%81%E9%A2%86%E5%8F%96%E5%9C%B0%E5%9D%80%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%AF%B9%E5%BA%94%E5%8C%BA%E5%9D%97%E6%B5%8F%E8%A7%88%E6%9F%A5%E8%AF%A2%E5%9C%B0%E5%9D%80/"/>
      <url>/2018/07/27/BTC-ETH%E6%B5%8B%E8%AF%95%E5%B8%81%E9%A2%86%E5%8F%96%E5%9C%B0%E5%9D%80%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%AF%B9%E5%BA%94%E5%8C%BA%E5%9D%97%E6%B5%8F%E8%A7%88%E6%9F%A5%E8%AF%A2%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<p>BTC测试币领取地址：<a href="https://testnet.manu.backend.hamburg/faucet" target="_blank" rel="noopener">https://testnet.manu.backend.hamburg/faucet</a></p><p>BTC测试区块查询地址：<a href="https://www.blocktrail.com/BTC" target="_blank" rel="noopener">https://www.blocktrail.com/BTC</a></p><p>BTC测试区块查询地址：<a href="https://testnet.blockchain.info/" target="_blank" rel="noopener">https://testnet.blockchain.info/</a></p><p>ETH（ropsten）测试币领取地址：<a href="http://faucet.ropsten.be:3001/" target="_blank" rel="noopener">http://faucet.ropsten.be:3001/</a></p><p>ETH（ropsten）测试区块查询地址：<a href="https://ropsten.etherscan.io/" target="_blank" rel="noopener">https://ropsten.etherscan.io/</a></p>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> BTC </tag>
            
            <tag> ETH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链开发之区块链钱包</title>
      <link href="/2018/07/25/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E5%8C%BA%E5%9D%97%E9%93%BE%E9%92%B1%E5%8C%85/"/>
      <url>/2018/07/25/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E5%8C%BA%E5%9D%97%E9%93%BE%E9%92%B1%E5%8C%85/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>“钱包”，大家都不陌生，因为我们每个人身上都会带一个钱包，里面存放了一些钱，一些证件，钥匙等等。而“区块链钱包”可能有些人就不是那么了解了。下边，我们就来介绍介绍区块链的钱包。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><strong>首先说明一点，这是我自己的定义</strong>。我觉着可以把区块链钱包当做是一个银行账户系统，它管理着你的在区块链上的资产，并且可以实现查看余额，转账，收账功，查看交易记录功能，而钱包应用就相当于银行的客户端，来实现钱包的具体功能。你的私钥就相当于银行账户的密码，你的地址就相当于银行的银行卡号。</p><h1 id="钱包分类"><a href="#钱包分类" class="headerlink" title="钱包分类"></a>钱包分类</h1><p>根据管理私钥的方式，大致分为，冷钱包，热钱包，软钱包，硬件钱包</p><h2 id="冷钱包"><a href="#冷钱包" class="headerlink" title="冷钱包"></a>冷钱包</h2><p>冷钱包就是，你把你的私钥，写在纸上，或者打印成二维码在纸上，或者记在你脑袋里，这类钱包一般就是为了安全保存私钥的，他不具备钱包的其它任何功能</p><h2 id="热钱包"><a href="#热钱包" class="headerlink" title="热钱包"></a>热钱包</h2><p>热钱包就是，不是自己保管自己的私钥，而是钱包的开发者把私钥保存在服务器端，你所有的钱包操作都要经过服务器操作，这种钱包，等于是把自己的资产完全交给了别人，所以是最不安全的钱包，很少有人会用这种钱包</p><h2 id="软钱包"><a href="#软钱包" class="headerlink" title="软钱包"></a>软钱包</h2><p>软钱包就是私钥保存在客户端本地，而不是保存在服务端，用户可以管理自己的私钥，相对于热钱包安全很多。软钱包又分为“<strong>全节点钱包</strong>”和“<strong>轻钱包</strong>”。</p><p>“<strong>全节点钱包</strong>”一般是钱包官方提供的钱包软件，它会把节点数据全部同步到本地，所以会花费很长时间同步数据，并且会占用很大的硬盘存储空间，所以对于个人用户来说，使用起来还是比较繁琐的，也就是说不适合个人用户使用</p><p>“<strong>轻钱包</strong>”是指不同步节点，转账使用离线签名，然后经过服务端节点广播出去，它的私钥也是保存的客户端本地的，用户可以自己管理，并且可以在手机这种移动端设备使用，所以现在最流行的就是这种“软钱包”，接下来的一系列文章也基本都是关于“轻钱包”开发的</p><h2 id="硬件钱包"><a href="#硬件钱包" class="headerlink" title="硬件钱包"></a>硬件钱包</h2><p>硬件钱包，是指带有简单嵌入式系统的硬件设备，通过USB链接电脑，可以在硬件设备上进行创建私钥和地址的操作，并且离线签名也是硬件操作的，硬件管理着你的私钥。这是目前最安全的钱包，但是价格比较贵一些，市面上比较流行的硬件钱包大概为：TREZOR，Ledger，Keepkey，库神等，感兴趣的可以网上搜一下</p>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链大数计算之java的BigDecimal类使用解析</title>
      <link href="/2018/07/24/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%A4%A7%E6%95%B0%E8%AE%A1%E7%AE%97%E4%B9%8Bjava%E7%9A%84BigDecimal%E7%B1%BB%E4%BD%BF%E7%94%A8%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/07/24/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%A4%A7%E6%95%B0%E8%AE%A1%E7%AE%97%E4%B9%8Bjava%E7%9A%84BigDecimal%E7%B1%BB%E4%BD%BF%E7%94%A8%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>之前讲解了BigInteger类的使用，这个类是做大整数运算的，想做大的浮点数运算就不行了，所以就需要其它的类来解决浮点运算的问题，这个类就是BigDecimal。</p><h1 id="BigDecimal介绍"><a href="#BigDecimal介绍" class="headerlink" title="BigDecimal介绍"></a>BigDecimal介绍</h1><p>不可变的、任意精度的有符号十进制数。BigDecimal 由任意精度的整数非标度值 和 32 位的整数标度 (scale) 组成。如果为零或正数，则标度是小数点后的位数。如果为负数，则将该数的非标度值乘以 10 的负 scale 次幂。因此，BigDecimal 表示的数值是 (unscaledValue × 10-scale)。 </p><p>BigDecimal 类提供以下操作：算术、标度操作、舍入、比较、哈希算法和格式转换。toString() 方法提供 BigDecimal 的规范表示形式。 </p><p>BigDecimal 类使用户能完全控制舍入行为。如果未指定舍入模式，并且无法表示准确结果，则抛出一个异常；否则，通过向该操作提供适当的 MathContext 对象，可以对已选择的精度和舍入模式执行计算。在任何情况下，可以为舍入控制提供八种舍入模式。使用此类（例如，ROUND_HALF_UP）中的整数字段来表示舍入模式已过时；应改为使用 RoundingMode enum（例如，RoundingMode.HALF_UP）的枚举值。 </p><p>当为 MathContext 对象提供 0 的精度设置（例如，MathContext.UNLIMITED）时，算术运算是准确的，它们是不采用任何 MathContext 对象的算术方法。（这是第 5 版之前的版本支持的唯一行为。）为了计算准确结果，不使用附带 0 精度设置的 MathContext 对象的舍入模式设置，因此与该对象无关。在除法中，准确的商可能是一个无限长的十进制扩展；例如，1 除以 3 所得的商。如果商具有无穷的十进制扩展，但是指定了该操作返回准确结果，则抛出 ArithmeticException。否则，像其他操作那样，返回除法运算的准确结果。 </p><p>当精度设置不为 0 时，BigDecimal 算法的规则完全符合 ANSI X3.274-1996 和 ANSI X3.274-1996/AM 1-2000（ 7.4 节）中定义的算法的可选操作模式。与上述标准不同，BigDecimal 包括多种舍入模式，它们对于版本 5 以前的 BigDecimal 版本中的除法是强制性的。这些 ANSI 标准和 BigDecimal 规范之间的任何冲突都按照有利于 BigDecimal 的方式进行解决。 </p><p>由于同一数值可以有不同的表示形式（具有不同的标度），因此运算和舍入的规则必须同时指定数值结果和结果表示形式中所用的标度。 </p><p>一般情况下，当准确结果（在除法中，可能有无限多位）比返回的数值具有更多位数时，舍入模式和精度设置确定操作如何返回具有有限位数的结果。 首先，MathContext 的 precision 设置指定要返回的总位数；这确定了结果的精度。位数计数从准确结果的最左边的非零数字开始。舍入模式确定丢弃的尾部位数如何影响返回的结果。 </p><p>对于所有算术运算符，运算的执行方式是，首先计算准确的中间结果，然后，使用选择的舍入模式将其舍入为精度设置（如有必要）指定的位数。如果不返回准确结果，则将丢弃准确结果的某些数位。当舍入增加了返回结果的大小时，前导数字“9”的进位传播可能会创建新的数位。例如，将值 999.9 舍入为三位数字，则在数值上等于一千，表示为 100×101。在这种情况下，新的 “1” 是返回结果的前导数位。 </p><p>除了逻辑的准确结果外，每种算术运算都有一个表示结果的首选标度。下表列出了每个运算的首选标度。 </p><blockquote><p>当为任何输入参数传递 null 对象引用时，此类的所有方法和构造方法都将抛出 NullPointerException。 </p></blockquote><h1 id="字段摘要"><a href="#字段摘要" class="headerlink" title="字段摘要"></a>字段摘要</h1><table><thead><tr><th>类型</th><th>变量名</th></tr></thead><tbody><tr><td>static BigDecimal</td><td><strong>ONE</strong>   值为 1，标度为 0。</td></tr><tr><td>static int</td><td><strong>ROUND_CEILING</strong>   接近正无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUND_UP 相同；如果为负，则舍入行为与 ROUND_DOWN 相同。注意，此舍入模式始终不会减少计算值。</td></tr><tr><td>static int</td><td><strong>ROUND_DOWN</strong>    接近零的舍入模式。在丢弃某部分之前始终不增加数字（即截短）。注意，此舍入模式始终不会增加计算值的大小。</td></tr><tr><td>static int</td><td><strong>RROUND_FLOOR</strong> 接近负无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUND_DOWN 相同；如果为负，则舍入行为与 ROUND_UP 相同。注意，此舍入模式始终不会增加计算值。</td></tr><tr><td>static int</td><td><strong>ROUND_HALF_DOWN</strong> 向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为上舍入的舍入模式。如果舍弃部分 &gt; 0.5，则舍入行为与 ROUND_UP 相同；否则舍入行为与 ROUND_DOWN 相同。</td></tr><tr><td>static int</td><td><strong>ROUND_HALF_EVEN</strong> 向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND_HALF_UP 相同；如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。注意，在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。</td></tr><tr><td>static int</td><td><strong>ROUND_HALF_UP</strong> 向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。如果舍弃部分 &gt;= 0.5，则舍入行为与 ROUND_UP 相同；否则舍入行为与 ROUND_DOWN 相同。注意，这是我们大多数人在小学时就学过的舍入模式。</td></tr><tr><td>static int</td><td><strong>ROUND_UNNECESSARY</strong> 断言请求的操作具有精确的结果，因此不需要舍入。如果对获得精确结果的操作指定此舍入模式，则抛出 ArithmeticException。</td></tr><tr><td>static int</td><td><strong>ROUND_UP</strong> 舍入远离零的舍入模式。在丢弃非零部分之前始终增加数字。注意，此舍入模式始终不会减少计算值的大小。</td></tr><tr><td>static BigDecimal</td><td><strong>TEN</strong> 值为 10，标度为 0。</td></tr><tr><td>static BigDecimal</td><td><strong>ZERO</strong> 值为 0，标度为 0。</td></tr></tbody></table><h1 id="常用构造方法"><a href="#常用构造方法" class="headerlink" title="常用构造方法"></a>常用构造方法</h1><table><thead><tr><th>构造方法</th><th>解释</th></tr></thead><tbody><tr><td>public BigDecimal(String val)</td><td>将 BigDecimal 的字符串表示形式转换为 BigDecimal。字符串表示形式由可选符号’+’ (‘\u002B’) 或 ‘-‘ (‘\u002D’) 组成，后跟零或多个十进制数字（“整数”）的序列，可以选择后跟一个小数，也可以选择后跟一个指数。该小数由小数点以及后跟的零或更多十进制数字组成。字符串必须至少包含整数或小数部分中的一个数字。由符号、整数和小数部分组成的数字称为有效位数。</td></tr><tr><td>public BigDecimal(String val, MathContext mc)</td><td>将 BigDecimal 的字符串表示形式转换为 BigDecimal，接受与 BigDecimal(String) 构造方法相同的字符串（按照上下文设置进行舍入）。</td></tr><tr><td>public BigDecimal(double val)</td><td>将 double 转换为 BigDecimal，后者是 double 的二进制浮点值准确的十进制表示形式。返回的 BigDecimal 的标度是使 (10scale × val) 为整数的最小值。</td></tr><tr><td>public BigDecimal(BigInteger val)</td><td>将 BigInteger 转换为 BigDecimal。BigDecimal 的标度是零</td></tr><tr><td>public BigDecimal(int val)</td><td>将 int 转换为 BigDecimal。BigDecimal 的标度为零。</td></tr><tr><td>public BigDecimal(long  val)</td><td>将 long  转换为 BigDecimal。BigDecimal 的标度为零。</td></tr><tr><td>public BigDecimal(BigInteger unscaledVal,int scale)</td><td>将 BigInteger 非标度值和 int 标度转换为 BigDecimal。BigDecimal 的值为 (unscaledVal × 10-scale)。</td></tr></tbody></table><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>public static BigDecimal valueOf(long unscaledVal,int scale)</td><td>将 long 非标度值和 int 标度转换为 BigDecimal。提供的此“静态工厂方法”优先于 (long, int) 构造方法，因为前者允许重用经常使用的 BigDecimal 值。</td></tr><tr><td>public static BigDecimal valueOf(long val)</td><td>将 long 值转换为具有零标度的 BigDecimal。提供的此“静态工厂方法”优先于 (long) 构造方法，因为前者允许重用经常使用的 BigDecimal 值。</td></tr><tr><td>public static BigDecimal valueOf(double val)</td><td>使用 Double.toString(double) 方法提供的 double 规范的字符串表示形式将 double 转换为 BigDecimal。 注：这通常是将 double（或 float）转化为 BigDecimal 的首选方法，因为返回的值等于从构造 BigDecimal（使用 Double.toString(double) 得到的结果）得到的值。</td></tr><tr><td>public BigDecimal add(BigDecimal augend)</td><td>返回一个 BigDecimal，其值为 (this + augend)，其标度为 max(this.scale(), augend.scale())。</td></tr><tr><td>public BigDecimal subtract(BigDecimal subtrahend)</td><td>返回一个 BigDecimal，其值为 (this - subtrahend)，其标度为 max(this.scale(), subtrahend.scale())。</td></tr><tr><td>public BigDecimal multiply(BigDecimal multiplicand)</td><td>返回一个 BigDecimal，其值为 (this × multiplicand)，其标度为 (this.scale() + multiplicand.scale())。</td></tr><tr><td>public BigDecimal divide(BigDecimal divisor)</td><td>返回一个 BigDecimal，其值为 (this / divisor)，其首选标度为 (this.scale() - divisor.scale())；如果无法表示准确的商值（因为它有无穷的十进制扩展），则抛出 ArithmeticException。</td></tr><tr><td>public BigDecimal remainder(BigDecimal divisor)</td><td>返回其值为 (this % divisor) 的 BigDecimal。 余数由 this.subtract(this.divideToIntegralValue(divisor).multiply(divisor)) 给出。注意，这不是模操作（结果可以为负）。</td></tr><tr><td>public BigDecimal pow(int n)</td><td>返回其值为 (thisn) 的 BigDecimal，准确计算该幂，使其具有无限精度。 参数 n 必须在 0 到 999999999（包括）之间。ZERO.pow(0) 返回 ONE。 注意，未来版本可能会扩展此方法允许的指数范围。</td></tr><tr><td>public BigDecimal abs()</td><td>返回 BigDecimal，其值为此 BigDecimal 的绝对值，其标度为 this.scale()。</td></tr><tr><td>public BigDecimal plus()</td><td>返回 BigDecimal，其值为 (+this)，其标度为 this.scale()。</td></tr><tr><td>public BigDecimal setScale(int newScale, RoundingMode roundingMode)</td><td>返回 BigDecimal，其标度为指定值，其非标度值通过此 BigDecimal 的非标度值乘以或除以十的适当次幂来确定，以维护其总值。如果该操作减少标度，则非标度值必须被除（而不是乘），并且该值可以更改；在这种情况下，将指定的舍入模式应用到除法中。 参数：newScale - 要返回的 BigDecimal 值的标度。roundingMode - 要应用的舍入模式。</td></tr><tr><td>public int compareTo(BigDecimal val)</td><td>当此 BigDecimal 在数字上小于、等于或大于 val 时，返回 -1、0 或 1。</td></tr><tr><td>public String toPlainString()</td><td>返回不带指数字段的此 BigDecimal 的字符串表示形式。对于具有正标度的值，小数点右边的数字个数用于指示标度。对于具有零或负标度的值，生成得到的字符串，好像将该值转换为在数值上等于具有零标度的值一样，并且好像零标度值的所有尾部零都出现在该结果中。 如果非标度值小于零，则整个字符串以减号 ‘-‘ (‘\u002D’) 为前缀。如果非标度值为零或正数，则没有任何符号字符作为前缀。 注意，如果将此方法的结果传递到 string constructor，则只需要恢复此 BigDecimal 的数值；新的 BigDecimal 的表示形式可以有不同的标度。尤其是，如果此 BigDecimal 具有负标度，则在由字符串构造方法进行处理时，此方法产生的字符串将具有零标度。 （此方法的作用类似于 1.4 和更早版本中的 toString 方法。）</td></tr><tr><td>public String toString()</td><td>返回此 BigDecimal 的字符串表示形式，如果需要指数，则使用科学记数法。</td></tr><tr><td>public String toEngineeringString()</td><td>返回此 BigDecimal 的字符串表示形式，需要指数时，则使用工程计数法。</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 大数计算 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java的random类的一个坑（集合乱序）</title>
      <link href="/2018/07/20/java%E7%9A%84random%E7%B1%BB%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/"/>
      <url>/2018/07/20/java%E7%9A%84random%E7%B1%BB%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</url>
      <content type="html"><![CDATA[<p><strong>引言</strong><br>在最近的开发中，要实现一个把一个集合的数给弄成乱序的，脑子里边的第一个想法就是使用随机数，先新建一个集合，写个死循环，然后获取随机位置下标，然后判断新集合是否包含这个数，不包含就把这个数加入新集合，包含，就继续下次循环，一直到新集合的长度达到和原始数组一样的长度为止，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">randomList</span><span class="params">(List&lt;String&gt; words)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (words == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Random random = <span class="keyword">new</span> Random();</span><br><span class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">           <span class="keyword">int</span> i = random.nextInt(words.size());</span><br><span class="line">           <span class="comment">// LogUtils.d("random:" + i);</span></span><br><span class="line">           String s = words.get(i);</span><br><span class="line">           <span class="keyword">if</span> (list.size() == words.size())</span><br><span class="line">               <span class="keyword">return</span> list;</span><br><span class="line">           <span class="keyword">if</span> (list.contains(s))</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               list.add(s);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这段大吗是没啥问题，刚开始也是，运行的很好，但是过了一段时间之后，发现有的手机会出问题：<strong>这个死循环不会结束</strong></p><p>后来经过调试，发现，有时候随机数会出现某一个数，一直随机不出不来<br>，后来查阅文档发现，Random的nextInt(int n)方法有可能会出现问题：</p><blockquote><p>该算法稍微有些复杂。它拒绝那些会导致不均匀分布的值（由于 2^31 无法被 n 整除）。某个值被拒绝的概率取决于 n。最坏的情况是 n=2^30+1，拒绝的概率是 1/2，循环终止前的预计迭代次数是 2。</p></blockquote><p>这是倒霉催的遇上被拒绝的值了，所以应该不能一直nextInt(int n)同一个范围的值。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>使用JDK自带的方法，Collections的shuffle方法，他的实现方式是：</p><blockquote><p>public static void shuffle(List&lt;?&gt; list)</p><p>使用默认随机源对指&gt; 定列表进行置换。所有置换发生的可能性都是大致相等的。<br>前面描述中使用了不确定的词“大致”，因为随机源只是大致上独立选择位&gt; 的无偏源。如果它是一个随机选择位的最佳源，那么算法将完全一致的选&gt; 择置换。</p></blockquote><blockquote><p>此实现向后遍历列表，从最后一个元素一直到第二个元素，将随机选择的&gt; 元素重复交换到“当前位置”。元素是从列表的一部分随机选择的，该部分&gt; 列表从第一个元素一直到当前位置（包括）。</p></blockquote><blockquote><p>此方法以线性时间运行。如果指定列表没有实现 RandomAccess 接口并&gt; 且是一个大型列表，则此实现在改组列表前将指定列表转储到数组中，并&gt; 将改组后的数组转储回列表中。这避免了二次行为，该行为是原地改组一&gt; 个“有序访问”列表引起的。 </p></blockquote><p>源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(List&lt;?&gt; list, Random rnd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = list.size();</span><br><span class="line">        <span class="keyword">if</span> (size &lt; SHUFFLE_THRESHOLD || list <span class="keyword">instanceof</span> RandomAccess) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=size; i&gt;<span class="number">1</span>; i--)</span><br><span class="line">                swap(list, i-<span class="number">1</span>, rnd.nextInt(i));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Object arr[] = list.toArray();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Shuffle array</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=size; i&gt;<span class="number">1</span>; i--)</span><br><span class="line">                swap(arr, i-<span class="number">1</span>, rnd.nextInt(i));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Dump array back into list</span></span><br><span class="line">            <span class="comment">// instead of using a raw type here, it's possible to capture</span></span><br><span class="line">            <span class="comment">// the wildcard but it will require a call to a supplementary</span></span><br><span class="line">            <span class="comment">// private method</span></span><br><span class="line">            ListIterator it = list.listIterator();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">                it.next();</span><br><span class="line">                it.set(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>可以看出，它每次nextInt（）的随机源是不一样的，所以很好的解决了我碰到的那个问题</p></blockquote><p>修改后的方法代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">randomList</span><span class="params">(List&lt;String&gt; words)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (words == <span class="keyword">null</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     list.addAll(words);</span><br><span class="line">     Collections.shuffle(list);</span><br><span class="line">     <span class="keyword">return</span> list;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链开发之eth转账所需的gas，gasprice，gaslimit介绍</title>
      <link href="/2018/07/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8Beth%E8%BD%AC%E8%B4%A6%E6%89%80%E9%9C%80%E7%9A%84gas%EF%BC%8Cgasprice%EF%BC%8Cgaslimit%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/07/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8Beth%E8%BD%AC%E8%B4%A6%E6%89%80%E9%9C%80%E7%9A%84gas%EF%BC%8Cgasprice%EF%BC%8Cgaslimit%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>要了结以太坊的转账方式，首先要了解一下几个概念问题，那就是什么是gas，什么是gasprice，什么是gaslimit。</p><h1 id="gas"><a href="#gas" class="headerlink" title="gas"></a>gas</h1><p>gas是以太坊交易中所花费的记账方式，在以太坊中，你要转账，部署智能合约，调用智能合约方法，都要消耗一定数量的gas</p><h1 id="gasprice"><a href="#gasprice" class="headerlink" title="gasprice"></a>gasprice</h1><p>之前说了gas，但是最终真正花的还是eth，所以就有一个转换率的问题，就像现实中的不同发币之间的汇率一样，gasprice就是起到一个汇率的作用，它代表的是一个gas值多少eth。</p><h1 id="gaslimit"><a href="#gaslimit" class="headerlink" title="gaslimit"></a>gaslimit</h1><p>gaslimit是做啥的呢，大家都知道以太坊的矿工记账，也是要收取手续费的，而手续费的最终是做少，是有记账所花的gas和gasprice决定的，所有的gas*gasprice就是最终的手续费，也就是从你账户扣除的eth，那gaslimit又是干啥的呢，以太坊规定，每笔交易的gas最少21000，矿工可以调整这个值，所以最终的花费的gas是不确定的，所以以太坊就设置了gaslimit，这个代表的是最多给旷工这么多gas，如果最终使用的gas少于这个gaslimit，剩余的还会返给你的，但是如果你的gaslimit不足以支付这次交易，那就是不会退回的，并且交易也就失败了，转账的额度也是回不来了，<strong>所以你转账设置的limit一定要大于21000。</strong></p>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eth </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链大数计算之java的BigInteger类使用解析</title>
      <link href="/2018/07/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%A4%A7%E6%95%B0%E8%AE%A1%E7%AE%97%E4%B9%8Bjava%E7%9A%84BigInteger%E7%B1%BB%E4%BD%BF%E7%94%A8%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/07/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%A4%A7%E6%95%B0%E8%AE%A1%E7%AE%97%E4%B9%8Bjava%E7%9A%84BigInteger%E7%B1%BB%E4%BD%BF%E7%94%A8%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>区块链里面用的最多的就是计算，并且还是很大的数的计算。大家都知道java里面基本类型里面就long类型可以表示一个64位的大数字，其数值范围为：</p><blockquote><p> long的最大值：9223372036854775807</p><p> long的最小值：-9223372036854775808</p></blockquote><p>这个数，看起来很大了，但是对于区块链来说完全是不够的，大家可以看一下我之前的一篇文章：<a href="/2018/07/19/区块链开发之以太坊ETH单位转换关系/">区块链开发以太坊ETH单位转换关系</a></p><p>这里边的数值都很大，做运算时，绝对不可能使用基本类型来做运算的。还好jdk里面已经内置了相关的类来解决这些问题，那就是BigInteger（主要做整数运算）和BigDecimal（主要做浮点运算），今天我们就来介绍一下BigInteger的用法（后边会写和BigDecimal的用法）：</p><h1 id="常用构造方法"><a href="#常用构造方法" class="headerlink" title="常用构造方法"></a>常用构造方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BigInteger(String val)  <span class="comment">//将 BigInteger 的十进制字符串表示形式转换为 BigInteger。</span></span><br><span class="line">          </span><br><span class="line">BigInteger(String val, <span class="keyword">int</span> radix) <span class="comment">//将指定基数的 BigInteger 的字符串表示形式转换为 BigInteger。 radix只得是进制，比如2进制，就填写2,16进制，就填16</span></span><br></pre></td></tr></table></figure><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><h2 id="1-求绝对值"><a href="#1-求绝对值" class="headerlink" title="1.求绝对值"></a>1.求绝对值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abs()<span class="comment">//返回其值是此 BigInteger 的绝对值的 BigInteger。</span></span><br></pre></td></tr></table></figure><h2 id="2-加法"><a href="#2-加法" class="headerlink" title="2.加法"></a>2.加法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(BigInteger val) <span class="comment">//相当于做加法，返回其值为 (this + val) 的 BigInteger。</span></span><br></pre></td></tr></table></figure><h2 id="3-比较大小"><a href="#3-比较大小" class="headerlink" title="3.比较大小"></a>3.比较大小</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compareTo(BigInteger val)<span class="comment">//比较大小，大于返回1，等于返回0，小于返回-1</span></span><br></pre></td></tr></table></figure><h2 id="4-除法"><a href="#4-除法" class="headerlink" title="4.除法"></a>4.除法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">divide(BigInteger val)<span class="comment">//相当于做除法 返回其值为 (this / val) 的 BigInteger。</span></span><br></pre></td></tr></table></figure><h2 id="5-转成double"><a href="#5-转成double" class="headerlink" title="5.转成double"></a>5.转成double</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doubleValue()<span class="comment">//将此 BigInteger 转换为 double。如果此 BigInteger 的数量太大，不能表示为 double，则将其适当地转换为 Double.NEGATIVE_INFINITY 或 Double.POSITIVE_INFINITY。注意，即使在返回值是有限的情况下，此转换也可以丢失关于 BigInteger 值的精度的信息。</span></span><br></pre></td></tr></table></figure><h2 id="6-转换为-float"><a href="#6-转换为-float" class="headerlink" title="6.转换为 float"></a>6.转换为 float</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">floatValue() <span class="comment">//将此 BigInteger 转换为 float。如果此 BigInteger 的数量太大，不能表示为 float，则将其适当地转换为 Float.NEGATIVE_INFINITY 或 Float.POSITIVE_INFINITY。注意，即使在返回值是有限的情况下，此转换也可以丢失关于 BigInteger 值的精度的信息。</span></span><br></pre></td></tr></table></figure><h2 id="7-转换为-int"><a href="#7-转换为-int" class="headerlink" title="7.转换为 int"></a>7.转换为 int</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intValue() <span class="comment">//将此 BigInteger 转换为 int。如果此 BigInteger 太长而不适合用 int 表示，则仅返回 32 位的低位字节。注意，此转换会丢失关于该 BigInteger 值的总大小的信息，并返回带有相反符号的结果</span></span><br></pre></td></tr></table></figure><h2 id="7-转换为-long"><a href="#7-转换为-long" class="headerlink" title="7.转换为 long"></a>7.转换为 long</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">longValue() <span class="comment">//将此 BigInteger 转换为 long。如果此 BigInteger 太长而不适合用 long 表示，则仅返回 64 位的低位字节。注意，此转换会丢失关于该 BigInteger 值的总大小的信息，并返回带有相反符号的结果。</span></span><br></pre></td></tr></table></figure><h2 id="8-乘法"><a href="#8-乘法" class="headerlink" title="8.乘法"></a>8.乘法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiply(BigInteger val) <span class="comment">//返回其值为 (this * val) 的 BigInteger。</span></span><br></pre></td></tr></table></figure><h2 id="9-减法"><a href="#9-减法" class="headerlink" title="9.减法"></a>9.减法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subtract(BigInteger val)<span class="comment">//返回其值为 (this - val) 的 BigInteger。</span></span><br></pre></td></tr></table></figure><h2 id="10-转成十进制字符串表示形式字符串"><a href="#10-转成十进制字符串表示形式字符串" class="headerlink" title="10.转成十进制字符串表示形式字符串"></a>10.转成十进制字符串表示形式字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toString() <span class="comment">//返回此 BigInteger 的十进制字符串表示形式。</span></span><br></pre></td></tr></table></figure><h2 id="11-转成2-8-10-16进制字符串表示形式字符串"><a href="#11-转成2-8-10-16进制字符串表示形式字符串" class="headerlink" title="11.转成2,8,10,16进制字符串表示形式字符串"></a>11.转成2,8,10,16进制字符串表示形式字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toString(<span class="keyword">int</span> radix)<span class="comment">//返回此 BigInteger 的给定基数的字符串表示形式。radix为进制数</span></span><br></pre></td></tr></table></figure><blockquote><p>Tip:其他方法可以查看帮助文档</p></blockquote>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 大数计算 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链开发以太坊ETH单位转换关系</title>
      <link href="/2018/07/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BB%A5%E5%A4%AA%E5%9D%8AETH%E5%8D%95%E4%BD%8D%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB/"/>
      <url>/2018/07/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BB%A5%E5%A4%AA%E5%9D%8AETH%E5%8D%95%E4%BD%8D%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<p>以太坊中的计价单位要比比特币的多一些，并且数值上也要大很多，超过了64位的无符号long的最大值，他们计价单位一共有，wei，kwei，mwei，gwei，szabo，finney，ether，kether，mether，gether这10种计价单位，他们之间的转换关系如下：</p><blockquote><p>1kwei = 10^3wei(10的 3次幂)</p><p>1mwei = 10^6wei(10的 6次幂)</p><p>1gwei = 10^9wei(10的 9次幂)</p><p>1szabo = 10^12wei(10的 12次幂)</p><p>1finney = 10^15wei(10的 15次幂)</p><p>1ether = 10^18wei(10的 18次幂)</p><p>1kether = 10^21wei(10的 21次幂)</p><p>1mether = 10^24wei(10的 24次幂)</p><p>1gether = 10^27wei(10的 27次幂)</p></blockquote>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eth </tag>
            
            <tag> 以太坊 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链开发比特币btc单位转换关系</title>
      <link href="/2018/07/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E6%AF%94%E7%89%B9%E5%B8%81btc%E5%8D%95%E4%BD%8D%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB/"/>
      <url>/2018/07/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E4%B9%8B%E6%AF%94%E7%89%B9%E5%B8%81btc%E5%8D%95%E4%BD%8D%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<p>今天来说一下比特币BTC的单位之间的转换关系，比特币有5种计价单位，btc，cbtc，mbtc，ubtc/μbtc，satoshi,其中satoshi是最小的单位，也是一笔交易中真正使用到的计价单位、之间的转化关系如下：</p><blockquote></blockquote><p>1比特币（Bitcoins，BTC）  </p><blockquote><p>0.01比特分（Bitcent，cBTC）</p><p>0.001毫比特（Milli-Bitcoins，mBTC）</p><p>0.000001微比特（Micro-Bitcoins，μBTC或uBTC） </p><p>0.00000001聪（satoshi）（基本单位） </p></blockquote><blockquote><p>1 bitcoin (BTC) </p><p>= 1000 millibitcoins (mBTC)</p><p>= 1 million microbitcoins (uBTC) 也就是100 0000</p><p>= 100 million Satoshi 也就是1亿（10000 0000）</p></blockquote>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> btc </tag>
            
            <tag> 比特币 </tag>
            
            <tag> bitcoin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小米刘海屏适配方案</title>
      <link href="/2018/07/16/%E5%B0%8F%E7%B1%B3%E5%88%98%E6%B5%B7%E5%B1%8F%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
      <url>/2018/07/16/%E5%B0%8F%E7%B1%B3%E5%88%98%E6%B5%B7%E5%B1%8F%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>1.目前已上市的小米 Notch 设备（俗称刘海屏手机）如下，其宽度、高度和形状均略有差异。</p><table><thead><tr><th>机型</th><th>model</th><th>device</th><th>分辨率</th><th>Notch高度</th><th>Notch宽度</th><th>DPI</th></tr></thead><tbody><tr><td>小米8</td><td>Xiaomi MI 8</td><td>dipper</td><td>1080*2248</td><td>89</td><td>560</td><td>440</td></tr><tr><td>小米8 SE</td><td>Xiaomi MI 8 SE</td><td>sirius</td><td>1080*2244</td><td>85</td><td>540</td><td>440</td></tr><tr><td>小米8 透明探索版</td><td>Xiaomi MI8 Explorer Edition</td><td>ursa</td><td>1080*2248</td><td>89</td><td>560</td><td>440</td></tr><tr><td>红米6 Pro</td><td>Xiaomi Redmi 6 Pro</td><td>sakura</td><td>1080*2280</td><td>89</td><td>352</td><td>440</td></tr></tbody></table><p>注：以上设备，由于MIUI调整了DPI值，因此DP值与像素值的转换关系是 1dp = 2.75 px 。</p><p>2..Android P 提供了 Notch / 刘海屏的标准适配接口</p><p>MIUI 也将在 Android P 上采用标准接口，因此，下文提及的接口仅用于 Android O 上。关于 Android P 的接口说明，详见我的之前的文章：<a href="/2018/07/12/谷歌官方流海适配方案/">谷歌官方流海适配方案</a>。</p><h1 id="系统级适配规则"><a href="#系统级适配规则" class="headerlink" title="系统级适配规则"></a>系统级适配规则</h1><p>Notch 机型在界面上会带来两个问题：</p><ol><li>顶部内容会被 Notch 遮挡</li><li>如何处理耳朵区的显示区域</li></ol><p>为了保证绝大部分应用都能正常显示，同时尽可能利用屏幕的显示区域。MIUI System UI 制定了以下全局规则：</p><ol><li>status bar 略高于 Notch 高度，对于应用来说，相当于一个更高的 status bar。</li><li>当应用显示 status bar 时（如微信首页），允许应用使用耳朵区（背后的逻辑是：因为 status bar 区域本身不可交互，且会显示信号、电池等信息，因此我们假定应用不会在该区域放置重要的内容和可交互的控件）。</li><li>当应用不显示 status bar 时（如全屏游戏），不允许应用使用耳朵区，系统默认填黑。</li><li>横屏时，默认均不允许使用耳朵区，系统默认填黑。</li><li>不允许应用180度倒转显示。</li></ol><h1 id="开发者适配"><a href="#开发者适配" class="headerlink" title="开发者适配"></a>开发者适配</h1><p>系统规则只能解决最基础的可用性问题，在系统规则下，开发者仍需要检查以下内容：</p><ol><li>检查系统默认规则是否有可用性问题，考虑是否做针对性优化。</li><li>检查 status bar 的显示策略。重新考虑是否隐藏 status bar</li><li>尽量避免某些页面显示 status bar，某些页面又隐藏，否则会出现页面跳变的情况（应用的可用高度变了）。</li><li>检查横屏的情况，确定是否需要利用横屏的Notch，若使用，需兼顾 Notch 出现在左边/右边的情况。</li><li>检查是否写死了状态栏的高度值。Notch机器状态栏的值是变化的，建议改为读取系统的值（后有相关方法说明）。</li><li>检查开启「隐藏屏幕刘海」后，应用是否显示异常（详见后文）。</li><li>检查普通屏幕的显示，保证应用在普通屏幕和 Notch 屏幕下都能正常显示 。</li></ol><h1 id="系统接口说明"><a href="#系统接口说明" class="headerlink" title="系统接口说明"></a>系统接口说明</h1><h2 id="1-如何判断设备为-Notch-机型"><a href="#1-如何判断设备为-Notch-机型" class="headerlink" title="1.如何判断设备为 Notch 机型"></a>1.如何判断设备为 Notch 机型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SystemProperties.getInt(<span class="string">"ro.miui.notch"</span>, <span class="number">0</span>) == <span class="number">1</span>;<span class="comment">//系统增加了 property ro.miui.notch，值为1时则是 Notch 屏手机。</span></span><br></pre></td></tr></table></figure><h2 id="2-如何获取-Notch-凹口-刘海-的高度和宽度（截至2018-6-26）"><a href="#2-如何获取-Notch-凹口-刘海-的高度和宽度（截至2018-6-26）" class="headerlink" title="2.如何获取 Notch / 凹口 / 刘海 的高度和宽度（截至2018.6.26）"></a>2.如何获取 Notch / 凹口 / 刘海 的高度和宽度（截至2018.6.26）</h2><p>MIUI 10 新增了获取刘海宽和高的方法，需升级至8.6.26开发版及以上版本。</p><p>以下是获取当前设备刘海<strong>高度</strong>的方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> resourceId = context.getResources().getIdentifier(<span class="string">"notch_height"</span>, <span class="string">"dimen"</span>, <span class="string">"android"</span>);</span><br><span class="line"><span class="keyword">if</span> (resourceId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result = context.getResources().getDimensionPixelSize(resourceId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下是获取当前设备刘海<strong>宽度</strong>的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> resourceId = context.getResources().getIdentifier(<span class="string">"notch_width"</span>, <span class="string">"dimen"</span>, <span class="string">"android"</span>);</span><br><span class="line"><span class="keyword">if</span> (resourceId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result = context.getResources().getDimensionPixelSize(resourceId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-Application-级别的控制接口"><a href="#3-Application-级别的控制接口" class="headerlink" title="3.Application 级别的控制接口"></a>3.Application 级别的控制接口</h2><p>如果开发者认为应用的所有页面统一处理就行，可以使用该接口。在 Application 下增加一个 meta-data，用以声明该应用是否使用耳朵区。示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line"> android:name=<span class="string">"notch.config"</span></span><br><span class="line"> android:value=<span class="string">"portrait|landscape"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>其中，value 的取值可以是以下4种：</p><blockquote><p>“none” 横竖屏都不绘制耳朵区</p><p>“portrait” 竖屏绘制到耳朵区</p><p>“landscape” 横屏绘制到耳朵区</p><p>“portrait|landscape” 横竖屏都绘制到耳朵区</p></blockquote><p>注：一旦开发者声明了meta-data，系统就会优先遵从开发者的声明。</p><h2 id="4-Window-级别的控制接口"><a href="#4-Window-级别的控制接口" class="headerlink" title="4.Window 级别的控制接口"></a>4.Window 级别的控制接口</h2><p>如果开发者希望对特定 Window 作处理，可以使用该接口。 在 WindowManager.LayoutParams 增加 extraFlags 成员变量，用以声明该 window 是否使用耳朵区。</p><p>其中，extraFlags 有以下变量：</p><blockquote><p>0x00000100 开启配置</p><p>0x00000200 竖屏配置</p><p>0x00000400 横屏配置</p></blockquote><p>组合后表示 Window 的配置，如：</p><blockquote><p>0x00000100 | 0x00000200 竖屏绘制到耳朵区</p><p>0x00000100 | 0x00000400 横屏绘制到耳朵区</p><p>0x00000100 | 0x00000200 | 0x00000400 横竖屏都绘制到耳朵区</p></blockquote><p>控制 extraFlags 时注意只控制这几位，不要影响其他位。可以用 Window 的 addExtraFlags 和 clearExtraFlags 来修改, 这两个方法是 MIUI 增加的方法，需要反射调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> flag = <span class="number">0x00000100</span> | <span class="number">0x00000200</span> | <span class="number">0x00000400</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Method method = Window.class.getMethod(<span class="string">"addExtraFlags"</span>,</span><br><span class="line">            <span class="keyword">int</span>.class);</span><br><span class="line">    method.invoke(getWindow(), flag);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    Log.i(TAG, <span class="string">"addExtraFlags not found."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-状态栏高度获取方法"><a href="#5-状态栏高度获取方法" class="headerlink" title="5.状态栏高度获取方法"></a>5.状态栏高度获取方法</h2><p>由于 Notch 设备的状态栏高度与正常机器不一样，因此在需要使用状态栏高度时，不建议写死一个值，而应该改为读取系统的值。</p><p>以下是获取当前设备状态栏高度的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> resourceId = context.getResources().getIdentifier(<span class="string">"status_bar_height"</span>, <span class="string">"dimen"</span>, <span class="string">"android"</span>);</span><br><span class="line"><span class="keyword">if</span> (resourceId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result = context.getResources().getDimensionPixelSize(resourceId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="「隐藏屏幕刘海」适配"><a href="#「隐藏屏幕刘海」适配" class="headerlink" title="「隐藏屏幕刘海」适配"></a>「隐藏屏幕刘海」适配</h2><p>MIUI 针对 Notch 设备，有一个「隐藏屏幕刘海」的设置项（设置-全面屏-隐藏屏幕刘海），具体表现是：系统会强制盖黑状态栏（无视应用的Notch使用声明），视觉上达到隐藏刘海的效果。但会给某些应用带来适配问题（控件/内容遮挡或过于靠边等）。</p><p>因此开发者在适配时，还需要检查开启「隐藏屏幕刘海」后，应用的页面是否显示正常。针对有问题的页面，我们建议：</p><p>1.请通过以下方法获取系统状态栏高度，然后据此调整布局，而不是写死布局：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> resourceId = context.getResources().getIdentifier(<span class="string">"status_bar_height"</span>, <span class="string">"dimen"</span>, <span class="string">"android"</span>);</span><br><span class="line"><span class="keyword">if</span> (resourceId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result = context.getResources().getDimensionPixelSize(resourceId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.如有需要，可以通过查询以下 Global settings 来确定「隐藏屏幕刘海」是否开启了，然后再作针对性优化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings.Global.getInt(mContext.getContentResolver(), <span class="string">"force_black"</span>, <span class="number">0</span>) == <span class="number">1</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> android刘海屏方案解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android刘海屏方案解决 </tag>
            
            <tag> android解决方案 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>华为刘海屏适配</title>
      <link href="/2018/07/16/%E5%8D%8E%E4%B8%BA%E5%88%98%E6%B5%B7%E5%B1%8F%E9%80%82%E9%85%8D/"/>
      <url>/2018/07/16/%E5%8D%8E%E4%B8%BA%E5%88%98%E6%B5%B7%E5%B1%8F%E9%80%82%E9%85%8D/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>刘海屏指的是手机屏幕正上方由于追求极致边框而采用的一种手机解决方案。因形似刘海儿而得名。也有一些其他叫法：挖孔屏、凹口屏等，本文档统一按照刘海屏来命名。市场上已经有越来越多的手机都支持这种屏幕形式。</p><p>谷歌在安卓P版本中已经提供了统一的适配方案，可是在安卓O版本上如何适配呢？本文将详细介绍华为安卓O版本刘海屏适配方案。使用华为提供的刘海屏SDK进行适配，此方案也会继承到华为安卓P版本手机上。在华为P版本手机中将同时支持两种方案：华为O版本方案+谷歌P版本方案。另外因为安卓O版本的刘海屏手机已经在市场上大量上市，这些手机在市场上会存续2~3年。所以建议大家现在要同时适配华为O版本方案以及谷歌P版本方案。</p><h1 id="华为刘海屏设计流程"><a href="#华为刘海屏设计流程" class="headerlink" title="华为刘海屏设计流程"></a>华为刘海屏设计流程</h1><p>设计理念：尽量减少APP的开发工作量</p><p>处理逻辑：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/imgs/huaweiliuhaisheji.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><blockquote><p>从流程图可以看出，华为的手机刘海屏的处理流程中，只要我们应用是全屏显示或者横屏显示，只要我们未做适配，系统默认就是页面下移，所以我们只需要适配全屏显示和横屏显示的页面，其它页面，还是按照照常即可。</p></blockquote><h1 id="华为刘海屏API接口"><a href="#华为刘海屏API接口" class="headerlink" title="华为刘海屏API接口"></a>华为刘海屏API接口</h1><p>##1. 判断是否刘海屏 ##<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasNotchInScreen</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> ret = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">   ClassLoader cl = context.getClassLoader();</span><br><span class="line"></span><br><span class="line">   Class HwNotchSizeUtil = cl.loadClass(<span class="string">"com.huawei.android.util.HwNotchSizeUtil"</span>);</span><br><span class="line"></span><br><span class="line">   Method get = HwNotchSizeUtil.getMethod(<span class="string">"hasNotchInScreen"</span>);</span><br><span class="line"></span><br><span class="line">   ret = (<span class="keyword">boolean</span>) get.invoke(HwNotchSizeUtil);</span><br><span class="line"></span><br><span class="line">   &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"></span><br><span class="line">   Log.e(<span class="string">"test"</span>, <span class="string">"hasNotchInScreen ClassNotFoundException"</span>);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line"></span><br><span class="line">  Log.e(<span class="string">"test"</span>, <span class="string">"hasNotchInScreen NoSuchMethodException"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line"> Log.e(<span class="string">"test"</span>, <span class="string">"hasNotchInScreen Exception"</span>);</span><br><span class="line"></span><br><span class="line"> &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-获取刘海尺寸"><a href="#2-获取刘海尺寸" class="headerlink" title="2. 获取刘海尺寸"></a>2. 获取刘海尺寸</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*int[0]值为刘海宽度 int[1]值为刘海高度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getNotchSize(Context context) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span>[] ret = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;<span class="comment">//int[0]值为刘海宽度 int[1]值为刘海高度</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">     ClassLoader cl = context.getClassLoader();</span><br><span class="line"></span><br><span class="line">        Class HwNotchSizeUtil = cl.loadClass(<span class="string">"com.huawei.android.util.HwNotchSizeUtil"</span>);</span><br><span class="line"></span><br><span class="line">        Method get = HwNotchSizeUtil.getMethod(<span class="string">"getNotchSize"</span>);</span><br><span class="line"></span><br><span class="line">        ret = (<span class="keyword">int</span>[]) get.invoke(HwNotchSizeUtil);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"></span><br><span class="line">        Log.e(<span class="string">"test"</span>, <span class="string">"getNotchSize ClassNotFoundException"</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line"></span><br><span class="line">        Log.e(<span class="string">"test"</span>, <span class="string">"getNotchSize NoSuchMethodException"</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        Log.e(<span class="string">"test"</span>, <span class="string">"getNotchSize Exception"</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="应用页面设置使用刘海区显示"><a href="#应用页面设置使用刘海区显示" class="headerlink" title="应用页面设置使用刘海区显示"></a>应用页面设置使用刘海区显示</h1><h2 id="1-方案一"><a href="#1-方案一" class="headerlink" title="1.方案一"></a>1.方案一</h2><p>使用新增的Meta-data属性android.notch_support</p><p>在应用的AndroidManifest.xml中增加meta-data属性，此属性不仅可以针对Application生效，也可以对Activity配置生效。</p><p>具体方式如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data android:name=<span class="string">"android.notch_support"</span> android:value=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>对Application生效，意味着该应用的所有页面，系统都不会做竖屏场景的特殊下移或者是横屏场景的右移特殊处理：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line"></span><br><span class="line">    android:allowBackup=<span class="string">"true"</span></span><br><span class="line"></span><br><span class="line">    android:icon=<span class="string">"@mipmap/ic_launcher"</span></span><br><span class="line"></span><br><span class="line">    android:label=<span class="string">"@string/app_name"</span></span><br><span class="line"></span><br><span class="line">    android:roundIcon=<span class="string">"@mipmap/ic_launcher_round"</span></span><br><span class="line"></span><br><span class="line">    android:testOnly=<span class="string">"false"</span></span><br><span class="line"></span><br><span class="line">    android:supportsRtl=<span class="string">"true"</span></span><br><span class="line"></span><br><span class="line">    android:theme=<span class="string">"@style/AppTheme"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta-data android:name=<span class="string">"android.notch_support"</span> android:value=<span class="string">"true"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;activity android:name=<span class="string">".MainActivity"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line"></span><br><span class="line">            &lt;action android:name=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;category android:name=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/intent-filter&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/activity&gt;</span><br></pre></td></tr></table></figure></p><p>对Activity生效，意味着可以针对单个页面进行刘海屏适配，设置了该属性的Activity系统将不会做特殊处理：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">    android:allowBackup=<span class="string">"true"</span></span><br><span class="line">    android:icon=<span class="string">"@mipmap/ic_launcher"</span></span><br><span class="line">    android:label=<span class="string">"@string/app_name"</span></span><br><span class="line">    android:roundIcon=<span class="string">"@mipmap/ic_launcher_round"</span></span><br><span class="line">    android:testOnly=<span class="string">"false"</span></span><br><span class="line">    android:supportsRtl=<span class="string">"true"</span></span><br><span class="line">    android:theme=<span class="string">"@style/AppTheme"</span>&gt;</span><br><span class="line">    &lt;activity android:name=<span class="string">".MainActivity"</span>&gt;</span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line">            &lt;action android:name=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span><br><span class="line"></span><br><span class="line">            &lt;category android:name=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span><br><span class="line">        &lt;/intent-filter&gt;</span><br><span class="line">    &lt;/activity&gt;</span><br><span class="line">    &lt;activity android:name=<span class="string">".LandscapeFullScreenActivity"</span> android:screenOrientation=<span class="string">"sensor"</span>&gt;</span><br><span class="line">    &lt;/activity&gt;</span><br><span class="line">    &lt;activity android:name=<span class="string">".FullScreenActivity"</span>&gt;</span><br><span class="line">        &lt;meta-data android:name=<span class="string">"android.notch_support"</span> android:value=<span class="string">"true"</span>/&gt;</span><br><span class="line">    &lt;/activity&gt;</span><br></pre></td></tr></table></figure></p><h2 id="2-方案二"><a href="#2-方案二" class="headerlink" title="2.方案二"></a>2.方案二</h2><p>使用给window添加新增的FLAG_NOTCH_SUPPORT<br>对Application生效，意味着该应用的所有页面，系统都不会做竖屏场景的特殊下移或者是横屏场景的右移特殊处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*刘海屏全屏显示FLAG*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_NOTCH_SUPPORT=<span class="number">0x00010000</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置应用窗口在华为刘海屏手机使用刘海区</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> window 应用页面window对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFullScreenWindowLayoutInDisplayCutout</span><span class="params">(Window window)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (window == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    WindowManager.LayoutParams layoutParams = window.getAttributes();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class layoutParamsExCls = Class.forName(<span class="string">"com.huawei.android.view.LayoutParamsEx"</span>);</span><br><span class="line">        Constructor con=layoutParamsExCls.getConstructor(LayoutParams.class);</span><br><span class="line">        Object layoutParamsExObj=con.newInstance(layoutParams);</span><br><span class="line">        Method method=layoutParamsExCls.getMethod(<span class="string">"addHwFlags"</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        method.invoke(layoutParamsExObj, FLAG_NOTCH_SUPPORT);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | IllegalAccessException |InstantiationException </span><br><span class="line">    | InvocationTargetException e) &#123;</span><br><span class="line">        Log.e(<span class="string">"test"</span>, <span class="string">"hw add notch screen flag api error"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.e(<span class="string">"test"</span>, <span class="string">"other Exception"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以通过clearHwFlags接口清除添加的华为刘海屏Flag，恢复应用不使用刘海区显示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*刘海屏全屏显示FLAG*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_NOTCH_SUPPORT=<span class="number">0x00010000</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置应用窗口在华为刘海屏手机使用刘海区</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> window 应用页面window对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setNotFullScreenWindowLayoutInDisplayCutout</span> <span class="params">(Window window)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (window == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    WindowManager.LayoutParams layoutParams = window.getAttributes();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class layoutParamsExCls = Class.forName(<span class="string">"com.huawei.android.view.LayoutParamsEx"</span>);</span><br><span class="line">        Constructor con=layoutParamsExCls.getConstructor(LayoutParams.class);</span><br><span class="line">        Object layoutParamsExObj=con.newInstance(layoutParams);</span><br><span class="line">        Method method=layoutParamsExCls.getMethod(<span class="string">"clearHwFlags"</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        method.invoke(layoutParamsExObj, FLAG_NOTCH_SUPPORT);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | IllegalAccessException |InstantiationException </span><br><span class="line">    | InvocationTargetException e) &#123;</span><br><span class="line">        Log.e(<span class="string">"test"</span>, <span class="string">"hw clear notch screen flag api error"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.e(<span class="string">"test"</span>, <span class="string">"other Exception"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>华为刘海屏flag动态添加和删除代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isAdd) &#123;<span class="comment">//add flag</span></span><br><span class="line">            isAdd = <span class="keyword">false</span>;</span><br><span class="line">            NotchSizeUtil.setFullScreenWindowLayoutInDisplayCutout(getWindow());           </span><br><span class="line">            getWindowManager().updateViewLayout(getWindow().getDecorView(),getWindow().getDecorView().getLayoutParams());</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;<span class="comment">//clear flag</span></span><br><span class="line">            isAdd = <span class="keyword">true</span>;</span><br><span class="line">            NotchSizeUtil.setNotFullScreenWindowLayoutInDisplayCutout(getWindow());            </span><br><span class="line">            getWindowManager().updateViewLayout(getWindow().getDecorView(),getWindow().getDecorView().getLayoutParams());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="获取默认和隐藏刘海区开关值接口"><a href="#获取默认和隐藏刘海区开关值接口" class="headerlink" title="获取默认和隐藏刘海区开关值接口"></a>获取默认和隐藏刘海区开关值接口</h1><p> 隐藏开关打开之后，显示规格<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/imgs/huaweiliuhaisheji2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>读取开关状态:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DISPLAY_NOTCH_STATUS = <span class="string">"display_notch_status"</span>;</span><br><span class="line"><span class="keyword">int</span> mIsNotchSwitchOpen = Settings.Secure.getInt(getContentResolver(),DISPLAY_NOTCH_STATUS, <span class="number">0</span>);  </span><br><span class="line"><span class="comment">// 0表示“默认”，1表示“隐藏显示区域”</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> android刘海屏方案解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android刘海屏方案解决 </tag>
            
            <tag> android解决方案 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VIVO和OPPO刘海屏适配方案</title>
      <link href="/2018/07/13/VIVO%E5%92%8COPPO%E5%88%98%E6%B5%B7%E5%B1%8F%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
      <url>/2018/07/13/VIVO%E5%92%8COPPO%E5%88%98%E6%B5%B7%E5%B1%8F%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h1 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h1><p>今年蓝绿厂，可谓是大放异彩啊，首先vivo 发布了全面屏手机NEX，开创了伸缩式前置摄像头的显赫，oppo紧跟着发布了find x，可为惊艳全球啊。当然在这之前蓝绿厂也发布了很多的流海异形屏手机，并且官方也给出了一些是配置指导，蓝绿厂的适配指导可以说是，没有说是没有适配，为何这样说呢，因为它没做啥特殊处理，不像华为和小米一样做了一些特殊处理，所以只要你的app之前做了<a href="/2018/07/12/适配android全面屏/">全面屏兼容处理</a>，和沉浸式模式处理，就不必做其它特殊处理，但是这里，我还是要写一下他们官方提供的一些方法，有可能在做一些特殊处理的情况下会用得到。</p><h1 id="1-判断是否刘海屏（凹凸屏）"><a href="#1-判断是否刘海屏（凹凸屏）" class="headerlink" title="1.判断是否刘海屏（凹凸屏）"></a>1.判断是否刘海屏（凹凸屏）</h1><h2 id="（1）oppo判断方式"><a href="#（1）oppo判断方式" class="headerlink" title="（1）oppo判断方式"></a>（1）oppo判断方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.getPackageManager().hasSystemFeature(“com.oppo.feature.screen.heteromorphism”);<span class="comment">//返回 true为凹形屏 ，可识别OPPO的手机是否为凹形屏。</span></span><br></pre></td></tr></table></figure><h2 id="（2）vivo判断方式"><a href="#（2）vivo判断方式" class="headerlink" title="（2）vivo判断方式"></a>（2）vivo判断方式</h2><p>vivo不仅可以判断是否刘海屏，还可以判断时候有圆角，具体见以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOTCH_IN_SCREEN_VOIO_MARK = <span class="number">0x00000020</span>;<span class="comment">//是否有凹槽</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ROUNDED_IN_SCREEN_VOIO_MARK = <span class="number">0x00000008</span>;<span class="comment">//是否有圆角</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isFeatureSupportInVIVO</span><span class="params">(Context context，<span class="keyword">int</span> mark)</span></span>&#123;</span><br><span class="line">   <span class="keyword">boolean</span> ret = <span class="keyword">false</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       ClassLoader cl = context.getClassLoader();</span><br><span class="line">       Class ftFeature = cl.loadClass(<span class="string">"android.util.FtFeature"</span>);</span><br><span class="line">       Method get = ftFeature.getMethod(<span class="string">"isFeatureSupport"</span>, <span class="keyword">int</span>.class);</span><br><span class="line">       ret = (<span class="keyword">boolean</span>) get.invoke(ftFeature, mark);</span><br><span class="line"></span><br><span class="line">   &#125; <span class="keyword">catch</span> (ClassNotFoundException e)</span><br><span class="line">   &#123; Log.e(<span class="string">"test"</span>, <span class="string">"hasNotchInScreen ClassNotFoundException"</span>); &#125;</span><br><span class="line">   <span class="keyword">catch</span> (NoSuchMethodException e)</span><br><span class="line">   &#123; Log.e(<span class="string">"test"</span>, <span class="string">"hasNotchInScreen NoSuchMethodException"</span>); &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Exception e)</span><br><span class="line">   &#123; Log.e(<span class="string">"test"</span>, <span class="string">"hasNotchInScreen Exception"</span>); &#125;</span><br><span class="line">   <span class="keyword">finally</span></span><br><span class="line">   &#123; <span class="keyword">return</span> ret; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-OPPO获取流海的详细信息"><a href="#2-OPPO获取流海的详细信息" class="headerlink" title="2.OPPO获取流海的详细信息"></a>2.OPPO获取流海的详细信息</h1><blockquote><p>注:这个只有OPPO提供了，对应的方法<br>凹形屏坐标获取方法：<br>获取ro.oppo.screen.heteromorphism属性值可获取凹形区域的范围，<br>例如 [ro.oppo.screen.heteromorphism]: [378,0:702,80]，含义如下 ：</p><p>378：表示竖屏下左上角横坐标 </p><p>0 ：表示竖屏下左上角竖坐标 </p><p>702：表示竖屏下右下角横坐标</p><p>80 ：表示竖屏下右下角竖坐标 </p></blockquote><p>如下图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/imgs/oppoliuhai.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">String mProperty = <span class="string">""</span>; </span><br><span class="line">mProperty = SystemProperties.get(<span class="string">"ro.oppo.screen.heteromorphism"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*反射系统方法封装类</span></span><br><span class="line"><span class="comment">调用方法：</span></span><br><span class="line"><span class="comment">String mProperty = ""; </span></span><br><span class="line"><span class="comment">mProperty = SystemProperties.get("ro.oppo.screen.heteromorphism"); </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemProperties</span> </span>&#123; </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123; </span><br><span class="line">              String value = <span class="string">""</span>; </span><br><span class="line">              Class&lt;?&gt; cls = <span class="keyword">null</span>; </span><br><span class="line">              <span class="keyword">try</span> &#123; </span><br><span class="line">                   cls = Class.forName(<span class="string">"android.os.SystemProperties"</span>); </span><br><span class="line">                   Method hideMethod = cls.getMethod(<span class="string">"get"</span>, String.class); </span><br><span class="line">                   Object object = cls.newInstance(); </span><br><span class="line">                   value = (String) hideMethod.invoke(object, key); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123; </span><br><span class="line">                  Log.e(<span class="string">"error"</span>, <span class="string">"get error() "</span>, e); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123; </span><br><span class="line">                  Log.e(<span class="string">"error"</span>, <span class="string">"get error() "</span>, e); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123; </span><br><span class="line">                  Log.e(<span class="string">"error"</span>, <span class="string">"get error() "</span>, e); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123; </span><br><span class="line">                  Log.e(<span class="string">"error"</span>, <span class="string">"get error() "</span>, e); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123; </span><br><span class="line">                  Log.e(<span class="string">"error"</span>, <span class="string">"get error() "</span>, e); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123; </span><br><span class="line">                  Log.e(<span class="string">"error"</span>, <span class="string">"get error() "</span>, e); </span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">return</span> value; </span><br><span class="line">      &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> android刘海屏方案解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android刘海屏方案解决 </tag>
            
            <tag> android解决方案 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>谷歌官方流海适配方案</title>
      <link href="/2018/07/12/%E8%B0%B7%E6%AD%8C%E5%AE%98%E6%96%B9%E6%B5%81%E6%B5%B7%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
      <url>/2018/07/12/%E8%B0%B7%E6%AD%8C%E5%AE%98%E6%96%B9%E6%B5%81%E6%B5%B7%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>随着去年iPhone X的发布，今年android厂商也紧随其后，发布了各种异形屏手机（国内习惯称为刘海屏），作为Android的东家，google也是大力支持这种方案，然后就决定在系统级予以支持，所以从Android P开始，就提供了相应的接口，适配刘海屏，并且华为和小米已经明确说明了，以后的新系统会兼容google官方的解决方案，所以接下来，我就介绍一下官方的解决方案。</p><h1 id="适配方案："><a href="#适配方案：" class="headerlink" title="适配方案："></a>适配方案：</h1><h2 id="1-官方特性介绍"><a href="#1-官方特性介绍" class="headerlink" title="1.官方特性介绍"></a>1.官方特性介绍</h2><p>谷歌称刘海屏为凹口屏以及屏幕缺口支持, 下面的内容摘自：<a href="https://developer.android.com/preview/features#cutout" target="_blank" rel="noopener">https://developer.android.com/preview/features#cutout</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/imgs/googleliuhai.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Android P 支持最新的全面屏以及为摄像头和扬声器预留空间的凹口屏幕。 通过全新的 <strong>DisplayCutout</strong> 类，可以确定非功能区域的位置和形状，这些区域不应显示内容。 要确定这些凹口屏幕区域是否存在及其位置，请使用 <strong>getDisplayCutout()</strong> 函数。</p><p>全新的窗口布局属性 layoutInDisplayCutoutMode 让您的应用可以为设备凹口屏幕周围的内容进行布局。 您可以将此属性设为下列值之一：</p><blockquote><p>（1）LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT</p><p>（2）LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES</p><p>（3）LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER</p></blockquote><p>您可以按如下方法在任何运行 Android P 的设备或模拟器上模拟屏幕缺口：</p><blockquote><p>（1）启用开发者选项。</p><p>（2）在 Developer options 屏幕中，向下滚动至 Drawing 部分并选择 Simulate a display with a cutout。</p><p>（3）选择凹口屏幕的大小。</p></blockquote><p>注：我们建议您通过使用运行 Android P 的设备或模拟器测试凹口屏幕周围的内容显示。</p><h2 id="2-相关接口介绍"><a href="#2-相关接口介绍" class="headerlink" title="2.相关接口介绍"></a>2.相关接口介绍</h2><p>（1）获取刘海尺寸相关接口：</p><p><a href="https://developer.android.com/reference/android/view/DisplayCutout" target="_blank" rel="noopener">https://developer.android.com/reference/android/view/DisplayCutout</a></p><table><thead><tr><th>方法</th><th>接口说明</th></tr></thead><tbody><tr><td>List<rect></rect> getBoundingRects()</td><td>返回Rects的列表，每个Rects都是显示屏上非功能区域的边界矩形。设备的每个短边最多只有一个非功能区域，而长边上则没有。</td></tr><tr><td>int getSafeInsetBottom()</td><td>返回安全区域距离屏幕底部的距离，单位是px。</td></tr><tr><td>int getSafeInsetLeft ()</td><td>返回安全区域距离屏幕左边的距离，单位是px。</td></tr><tr><td>int getSafeInsetRight ()</td><td>返回安全区域距离屏幕右边的距离，单位是px。</td></tr><tr><td>int getSafeInsetTop ()</td><td>返回安全区域距离屏幕顶部的距离，单位是px。</td></tr></tbody></table><p>（2）设置是否延伸到刘海区显示接口：<br><a href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams#layoutInDisplayCutoutMode" target="_blank" rel="noopener">https://developer.android.com/reference/android/view/WindowManager.LayoutParams#layoutInDisplayCutoutMode</a></p><table><thead><tr><th>方法</th><th>接口说明</th></tr></thead><tbody><tr><td>int layoutInDisplayCutoutMode</td><td>默认值：<br>LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT<br>其他可能取值：<br>LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES<br>LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER</td></tr></tbody></table><p><a href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES" target="_blank" rel="noopener">https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES</a></p><table><thead><tr><th>常量</th><th>常量说明</th></tr></thead><tbody><tr><td>int LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT</td><td>只有当DisplayCutout完全包含在系统状态栏中时，才允许窗口延伸到DisplayCutout区域显示。</td></tr><tr><td>int LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER</td><td>该窗口决不允许与DisplayCutout区域重叠。</td></tr><tr><td>int LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES</td><td>该窗口始终允许延伸到屏幕短边上的DisplayCutout区域。</td></tr></tbody></table><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>（1）设置使用刘海区显示代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使内容出现在status bar后边，如果要使用全屏的话再加上View.SYSTEM_UI_FLAG_FULLSCREEN</span></span><br><span class="line">getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN); </span><br><span class="line"><span class="comment">//设置页面全屏显示</span></span><br><span class="line">WindowManager.LayoutParams lp = getWindow().getAttributes();</span><br><span class="line">lp.layoutInDisplayCutoutMode = </span><br><span class="line">       windowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES; </span><br><span class="line"><span class="comment">//设置页面延伸到刘海区显示</span></span><br><span class="line">getWindow().setAttributes(lp);</span><br></pre></td></tr></table></figure><p>（2）获取刘海屏安全显示区域和刘海尺寸信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">getWindow().getDecorView().setOnApplyWindowInsetsListener(<span class="keyword">new</span> View.OnApplyWindowInsetsListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WindowInsets <span class="title">onApplyWindowInsets</span><span class="params">(View view, WindowInsets windowInsets)</span> </span>&#123;</span><br><span class="line">        DisplayCutout cutout = windowInsets.getDisplayCutout();</span><br><span class="line">        <span class="keyword">if</span> (cutout == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"cutout==null, is not notch screen"</span>);<span class="comment">//通过cutout是否为null判断是否刘海屏手机</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;Rect&gt; rects = cutout.getBoundingRects();</span><br><span class="line">            <span class="keyword">if</span> (rects == <span class="keyword">null</span> || rects.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"rects==null || rects.size()==0, is not notch screen"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"rect size:"</span> + rects.size());<span class="comment">//注意：刘海的数量可以是多个</span></span><br><span class="line">                <span class="keyword">for</span> (Rect rect : rects) &#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">"cutout.getSafeInsetTop():"</span> + cutout.getSafeInsetTop()</span><br><span class="line">                            + <span class="string">", cutout.getSafeInsetBottom():"</span> + cutout.getSafeInsetBottom()</span><br><span class="line">                            + <span class="string">", cutout.getSafeInsetLeft():"</span> + cutout.getSafeInsetLeft()</span><br><span class="line">                            + <span class="string">", cutout.getSafeInsetRight():"</span> + cutout.getSafeInsetRight()</span><br><span class="line">                            + <span class="string">", cutout.rects:"</span> + rect</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> windowInsets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="UI适配"><a href="#UI适配" class="headerlink" title="UI适配"></a>UI适配</h1><h2 id="1-判断是否为刘海屏"><a href="#1-判断是否为刘海屏" class="headerlink" title="1.判断是否为刘海屏"></a>1.判断是否为刘海屏</h2><p>见上边代码</p><h2 id="2-调整布局"><a href="#2-调整布局" class="headerlink" title="2.调整布局"></a>2.调整布局</h2><p>如果是刘海屏，调整布局避开刘海区。</p><blockquote><p>布局原则：保证重要的文字、图片、视频信息、可点击的控件和图标，应用弹窗等，建议显示在状态栏区域以下（安全区域）。如果内容不重要或者不会遮挡，布局可以延伸到状态栏区域（危险区域）。</p></blockquote><p>建议按照如下布局原则修改：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/imgs/shipeiliuhaiguize.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="3-获取状态栏高度"><a href="#3-获取状态栏高度" class="headerlink" title="3.获取状态栏高度"></a>3.获取状态栏高度</h2><blockquote><p>经过试验研究，小米和华为的获取的高度就是刘海的高度，并且在不同状态下这个值会有所变化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getStatusBarHeight</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> resourceId = context.getResources().getIdentifier(<span class="string">"status_bar_height"</span>, <span class="string">"dimen"</span>, <span class="string">"android"</span>);</span><br><span class="line">    <span class="keyword">if</span> (resourceId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        result = context.getResources().getDimensionPixelSize(resourceId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> android刘海屏方案解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android刘海屏方案解决 </tag>
            
            <tag> android解决方案 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>适配android全面屏</title>
      <link href="/2018/07/12/%E9%80%82%E9%85%8Dandroid%E5%85%A8%E9%9D%A2%E5%B1%8F/"/>
      <url>/2018/07/12/%E9%80%82%E9%85%8Dandroid%E5%85%A8%E9%9D%A2%E5%B1%8F/</url>
      <content type="html"><![CDATA[<h1 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h1><p>随着android手机的发展，手机屏幕已经从4:3,16:9,16:10发展到现如今的所谓的全面屏，比例一般为18:9，18.9:9,19:9。</p><h1 id="更大的屏幕高宽比："><a href="#更大的屏幕高宽比：" class="headerlink" title="更大的屏幕高宽比："></a>更大的屏幕高宽比：</h1><p>以三星S8为例，屏幕比例为18.5:9，从下图可以看到，在 1080P 的分辨率下，比标准的 16:9 屏幕，足足多了300像素。开发者需要作一些优化，以充分利用更大的显示空间。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/imgs/s8_display.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>这就会对一些app存在兼容性问题比如不能全屏显示啊等等，如下图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/imgs/今日头条在S8的效果.png" alt="今日头条在S8的效果" title="">                </div>                <div class="image-caption">今日头条在S8的效果</div>            </figure></p><h1 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h1><h2 id="1-声明-Maximum-Aspect-Ratio"><a href="#1-声明-Maximum-Aspect-Ratio" class="headerlink" title="1.声明 Maximum Aspect Ratio"></a>1.声明 Maximum Aspect Ratio</h2><p>Android 标准接口中，支持应用声明其支持的最大屏幕高宽比（maximum aspect ratio）。具体声明如下，其中的 ratio_float 被定义为是高除以宽，以 16:9 为例，ratio_float = 16/9 = 1.778 (18.5:9则为2.056)。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;application&gt;</span><br><span class="line">    &lt;meta-data android:name=<span class="string">"android.max_aspect"</span> android:value=<span class="string">"ratio_float"</span> /&gt;</span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure><p>若开发者没有声明该属性，ratio_float 的默认值为1.86，小于2.056，因此这类应用在三星S8上，默认不会全屏显示，屏幕两边会留黑，如上图所示</p><blockquote><p>因此建议开发者声明 Maximum Aspect Ratio 2 或更多。值得一提的是，如果应用的 <strong>android:resizeableActivity</strong> 已经设置为 <strong>true</strong>，就不必设置 <strong>Maximum Aspect Ratio</strong> 了。<strong>还有一点就是：如果您的应用面向 Android N，但未对android:resizeableActivity属性指定值，则该属性的值默认设为 true。</strong></p></blockquote><h2 id="2-避免内容拉伸-变形"><a href="#2-避免内容拉伸-变形" class="headerlink" title="2.避免内容拉伸/变形"></a>2.避免内容拉伸/变形</h2><p>从16:9变成18.5:9，图片往往被会拉伸变形，此问题常见于开屏素材。开发者应使用更灵活的布局，以适应不同的屏幕比例。</p><blockquote><p>接下来我会出一系列的文章，说一下几种国产手机的刘海屏适配方案和google官方的适配方案</p></blockquote>]]></content>
      
      <categories>
          
          <category> android问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android解决方案 </tag>
            
            <tag> android适配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一个兼容沉浸式模式的可以从上部和底部弹出的snackbar库</title>
      <link href="/2018/07/11/%E4%B8%80%E4%B8%AA%E5%85%BC%E5%AE%B9%E6%B2%89%E6%B5%B8%E5%BC%8F%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8F%AF%E4%BB%A5%E4%BB%8E%E4%B8%8A%E9%83%A8%E5%92%8C%E5%BA%95%E9%83%A8%E5%BC%B9%E5%87%BA%E7%9A%84snackbar%E5%BA%93/"/>
      <url>/2018/07/11/%E4%B8%80%E4%B8%AA%E5%85%BC%E5%AE%B9%E6%B2%89%E6%B5%B8%E5%BC%8F%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8F%AF%E4%BB%A5%E4%BB%8E%E4%B8%8A%E9%83%A8%E5%92%8C%E5%BA%95%E9%83%A8%E5%BC%B9%E5%87%BA%E7%9A%84snackbar%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>现在越来越多的app使用snackbar，google官方提供的一个提示工具，但是它只能从底部弹出来。但是在实际开发中，往往会和ios使用一套ui，ios流行从顶部弹出提示。为了同ios实现相同的效果，我特别封装了一个可以从上部和底部弹出的snackbar库，并且兼容沉浸模式，大体效果如下图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/imgs/topbottomsnackbar.gif" alt="效果动态图" title="">                </div>                <div class="image-caption">效果动态图</div>            </figure></p><p><strong>github地址：</strong><a href="https://github.com/wypeng2012/TopBottomSnackBar" target="_blank" rel="noopener">https://github.com/wypeng2012/TopBottomSnackBar</a></p><blockquote><p><strong>注意：使用这个库必须api版本 &gt;= 14</strong></p></blockquote><h1 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h1><h2 id="1-从顶部弹出："><a href="#1-从顶部弹出：" class="headerlink" title="1. 从顶部弹出："></a>1. 从顶部弹出：</h2><p>要想从顶部弹出，要使用TBSnackbar.STYLE_SHOW_TOP模式，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* if you use STYLE_SHOW_TOP and your activity has toolbar or</span></span><br><span class="line"><span class="comment">actionbar ,you should use "findViewById(android.R.id.content)",must</span></span><br><span class="line"><span class="comment">not use "getWindow().getDecorView()"*/</span></span><br><span class="line">TBSnackbar.make(findViewById(android.R.id.content), <span class="string">"This is a top snack!"</span>, TBSnackbar.LENGTH_SHORT, TBSnackbar.STYLE_SHOW_TOP).show();</span><br></pre></td></tr></table></figure><h2 id="2-从底部弹出："><a href="#2-从底部弹出：" class="headerlink" title="2. 从底部弹出："></a>2. 从底部弹出：</h2><p>要想从底部弹出，要使用TBSnackbar.STYLE_SHOW_BOTTOM模式，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if you use STYLE_SHOW_BOTTOM  ,you can use any view.But if you use</span></span><br><span class="line"><span class="comment">//CoordinatorLayout,you must use CoordinatorLayout.</span></span><br><span class="line">TBSnackbar.make(findViewById(android.R.id.content), <span class="string">"This is a bottom snack!"</span>, TBSnackbar.LENGTH_SHORT,TBSnackbar.STYLE_SHOW_BOTTOM).show();</span><br></pre></td></tr></table></figure><h2 id="3-使用沉浸模式："><a href="#3-使用沉浸模式：" class="headerlink" title="3. 使用沉浸模式："></a>3. 使用沉浸模式：</h2><p>使用沉浸模式，肯定是从顶部弹出，要使用TBSnackbar.STYLE_SHOW_TOP_FITSYSTEMWINDOW模式，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if you use STYLE_SHOW_TOP_FITSYSTEMWINDOW ,you must use</span></span><br><span class="line"><span class="comment">//getWindow().getDecorView()  android api &gt;= 19        </span></span><br><span class="line">TBSnackbar.make(getWindow().getDecorView(),<span class="string">"This is a fitsystemwindow snack!"</span>, TBSnackbar.LENGTH_SHORT,TBSnackbar.STYLE_SHOW_TOP_FITSYSTEMWINDOW).show();</span><br></pre></td></tr></table></figure><h2 id="4-添加图标："><a href="#4-添加图标：" class="headerlink" title="4. 添加图标："></a>4. 添加图标：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setIconLeft(@DrawableRes int drawableRes, float sizeDp) the size is dp,24dp is ok</span></span><br><span class="line"><span class="comment">//if you want change the icon padding you can use setIconPadding(int padding)</span></span><br><span class="line"><span class="comment">//setIconRight(@DrawableRes int drawableRes, float sizeDp) you can use        </span></span><br><span class="line">TBSnackbar snackbar = TBSnackbar.make(findViewById(android.R.id.content), <span class="string">"This is a left icon snack!"</span>, TBSnackbar.LENGTH_SHORT, TBSnackbar.STYLE_SHOW_TOP);</span><br><span class="line">snackbar.setIconLeft(R.mipmap.ic_core,<span class="number">24</span>);</span><br><span class="line">snackbar.show()</span><br></pre></td></tr></table></figure><h2 id="5-添加action："><a href="#5-添加action：" class="headerlink" title="5. 添加action："></a>5. 添加action：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//you can use it like google's SnackBar </span></span><br><span class="line"><span class="keyword">final</span> TBSnackbar snackbar = TBSnackbar.make(findViewById(android.R.id.content), <span class="string">"This is a action snack!"</span>, TBSnackbar.LENGTH_INDEFINITE, TBSnackbar.STYLE_SHOW_TOP);</span><br><span class="line">snackbar.setAction(<span class="string">"Action"</span>, <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                        snackbar.dismiss();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"> snackbar.show();</span><br></pre></td></tr></table></figure><h1 id="如何远程依赖："><a href="#如何远程依赖：" class="headerlink" title="如何远程依赖："></a>如何远程依赖：</h1><h2 id="1-Maven"><a href="#1-Maven" class="headerlink" title="1. Maven"></a>1. Maven</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">     &lt;groupId&gt;com.github&lt;/groupId&gt;  </span><br><span class="line">     &lt;artifactId&gt;topbottomsnackbar&lt;/artifactId&gt; </span><br><span class="line">     &lt;version&gt;1.1.0&lt;/version&gt; </span><br><span class="line">     &lt;type&gt;pom&lt;/type&gt; </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-Gradle"><a href="#2-Gradle" class="headerlink" title="2. Gradle"></a>2. Gradle</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.github:topbottomsnackbar:1.1.0&apos;</span><br></pre></td></tr></table></figure><h2 id="3-Ivy"><a href="#3-Ivy" class="headerlink" title="3. Ivy"></a>3. Ivy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency org=&apos;com.github&apos; name=&apos;topbottomsnackbar&apos; rev=&apos;1.1.0&apos;&gt;</span><br><span class="line">       &lt;artifact name=&apos;$AID&apos; ext=&apos;pom&apos;&gt;</span><br><span class="line">       &lt;/artifact&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> android开源库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>给TextView上下左右添加图标</title>
      <link href="/2018/07/10/%E7%BB%99TextView%E4%B8%8A%E4%B8%8B%E5%B7%A6%E5%8F%B3%E6%B7%BB%E5%8A%A0%E5%9B%BE%E6%A0%87/"/>
      <url>/2018/07/10/%E7%BB%99TextView%E4%B8%8A%E4%B8%8B%E5%B7%A6%E5%8F%B3%E6%B7%BB%E5%8A%A0%E5%9B%BE%E6%A0%87/</url>
      <content type="html"><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>在Android开发中，经常会碰到一个图标加几个文字的界面，平常的解决方案可能是使用一个线性布局，然后放置图标和文字的位置，其实有一种更简单的方式实现这种布局，并且你可以在它的四个方向上都设置上图标。如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/imgs/textview_draw.png" alt="四周都有图片的TextView" title="">                </div>                <div class="image-caption">四周都有图片的TextView</div>            </figure><h1 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h1><h2 id="1-xml文件实现-，代码如下："><a href="#1-xml文件实现-，代码如下：" class="headerlink" title="1. xml文件实现 ，代码如下："></a>1. xml文件实现 ，代码如下：</h2>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_gravity=<span class="string">"center"</span></span><br><span class="line">    android:text=<span class="string">"这是文字"</span></span><br><span class="line">    android:textColor=<span class="string">"#fff"</span></span><br><span class="line">    android:drawableStart=<span class="string">"@drawable/btc_logo"</span></span><br><span class="line">    android:drawableTop=<span class="string">"@drawable/eth_logo"</span></span><br><span class="line">    android:drawableEnd=<span class="string">"@drawable/btc_logo"</span></span><br><span class="line">    android:drawableBottom=<span class="string">"@drawable/eth_logo"</span></span><br><span class="line">    android:drawablePadding=<span class="string">"10dp"</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="代码解释："><a href="#代码解释：" class="headerlink" title="代码解释："></a>代码解释：</h2><blockquote><p>drawableStart：在左边画图标</p><p>drawableTop：在顶部画图标</p><p>drawableEnd：在右边画图标</p><p>drawableBottom：在底部画图标</p><p>drawablePadding：添加文字和图标之间的间距</p><p>大家可以根据具体需求，选择属性，实现自己想要的效果</p></blockquote><h2 id="2-代码实现："><a href="#2-代码实现：" class="headerlink" title="2.代码实现："></a>2.代码实现：</h2><p>1）使用setCompoundDrawables（）方法</p><blockquote><p>setCompoundDrawables(@Nullable Drawable left, @Nullable Drawable top,<br>            @Nullable Drawable right, @Nullable Drawable bottom)</p><p>四个参数分别为左，上，右，下，方位的图标，不想设置，就传null，</p><p><strong>特别注意一点：在传Drawable值之前，必须先调用Drawable的setBounds方法，类似于这样：left.setBounds(0, 0, left.getIntrinsicWidth(), left.getIntrinsicHeight());</strong></p></blockquote><p>2）使用setCompoundDrawablesWithIntrinsicBounds（）方法</p><blockquote><p>setCompoundDrawablesWithIntrinsicBounds(@DrawableRes int left,<br>            @DrawableRes int top, @DrawableRes int right, @DrawableRes int bottom)</p><p><strong>四个参数为图片的资源id</strong></p></blockquote><p>3）使用setCompoundDrawablesWithIntrinsicBounds（）方法</p><blockquote><p>setCompoundDrawablesWithIntrinsicBounds(@Nullable Drawable left,<br>            @Nullable Drawable top, @Nullable Drawable right, @Nullable Drawable bottom) </p><p><strong>四个参数为图片Drawable,不需要调用Drawable的setBounds方法</strong></p></blockquote><p>4）使用setCompoundDrawablesRelative系列方法代替以上对应的方法，它们的不同点也只是实现Drawable布局的方式不同而已</p>]]></content>
      
      <categories>
          
          <category> android界面开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> android界面开发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>给LinerLayout添加分隔线</title>
      <link href="/2018/07/09/%E7%BB%99LinerLayout%E6%B7%BB%E5%8A%A0%E5%88%86%E9%9A%94%E7%BA%BF/"/>
      <url>/2018/07/09/%E7%BB%99LinerLayout%E6%B7%BB%E5%8A%A0%E5%88%86%E9%9A%94%E7%BA%BF/</url>
      <content type="html"><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>在android开发中，经常会碰到添加分隔线的界面设计，有些同学可能就是直接设置一个view，然后设置宽高和背景色，这也不失为一种方式，但是还有更简单方式，那就是利用LinerLayout自带的divider属性<br><a id="more"></a></p><h1 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h1><p>假设布局如下图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/imgs/linearlayout.png" alt="设计图" title="">                </div>                <div class="image-caption">设计图</div>            </figure></p><ol><li><p>在res/drawable/目录下创建一个shape的xml文件，里面代码如下：</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;shape xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span><br><span class="line">    &lt;solid android:color=<span class="string">"#262936"</span>/&gt;</span><br><span class="line">    &lt;size android:width=<span class="string">"@dimen/dimen_1dp"</span> android:height=<span class="string">"50dp"</span>/&gt;</span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure></li><li><p>在你的layout布局中的LinearLayout，添加如下属性：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">android:divider=&quot;@drawable/divider_line&quot;</span><br><span class="line">android:dividerPadding=&quot;@dimen/dimen_20dp&quot;</span><br><span class="line">android:showDividers=&quot;middle&quot;</span><br></pre></td></tr></table></figure></li><li><p>dividerPadding的作用是设置分隔线的内边距</p></li><li>showDividers属性，是设置分隔线的显示位置，有四个flag，分别是：begining（开始位置），end（结束位置），middle（中间，最常见的），none（不显示，也是默认值）</li></ol>]]></content>
      
      <categories>
          
          <category> android界面开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> android界面开发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>什么是区块链</title>
      <link href="/2018/07/09/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
      <url>/2018/07/09/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
      <content type="html"><![CDATA[<h1 id="区块链历史："><a href="#区块链历史：" class="headerlink" title="区块链历史："></a>区块链历史：</h1><p>  2008年中本聪在互联网上一个讨论信息加密的邮件组中发表了一篇文章，勾画了比特币系统的基本框架，2009年他为该系统建立了一个开放源代码项目 (open source project)，正式宣告了比特币的诞生。（此大神已归隐）。<br>  比特币可以说是世界上第一款区块链产品，这是一个革命性的产品。</p><p>  2015年是国外区块链的元年， 世界许多重大组<br>  织， 包括高盛、 花旗银行、 英国央行、 美国央行等机<br>  构纷纷在区块链上面投资。</p><p>  2016年1月， 英国首席科学家建议英国政府把区<br>  块链技术列为英国国家战略， 这是区块链历史上一个<br>  重大突破， 原因是基于华尔街以及金融机构对区块链<br>  的评价。</p><p>  2016年可以说是中国区块链元年， 因为在2016年<br>  区块链在中国受到极大的重视。 首先是1月的时候，<br>  人民银行宣布要使用数字货币。 然后在30日以后， 许<br>  多中国的组织单位就开始投资区块链。 中国许多大学<br>  也开始研究区块链技术， 大型金融机构都纷纷表态成<br>  立区块链团队来研究区块链， 区块链的讨论班以及研<br>  讨会如雨后春笋一般大量涌现</p><p>  区块链第一代1.0：比特币是其代表，很多山寨币都是在其基础上修改而来的</p><p>  区块链第二代2.0：毋庸置疑的，它就是以太坊，以太坊是图灵完备的第二代区块链技术，它对外提供了一个平台，在其平台，可以构建很多的应用，现在其平台已经存在很多的dapp应用，并且现在很多的ico项目，都是跑在以太坊平台上的</p><p> 区块链第三代3.0：现在还没有一个定论，但是肯定很多人会说EOS，但是现在看来EOS还真不足以获得3.0的称号，EOS是基于石墨烯结构的区块链，还有基于DAG结构的区块链，这两种模式的，都号称自己是3.0，但是就我个人而言，我更看好IPFS，我觉着它可以担得起区块链3.0的称号（仅表达个人意思，不喜勿喷）</p><h1 id="区块链的分类："><a href="#区块链的分类：" class="headerlink" title="区块链的分类："></a>区块链的分类：</h1><p> 以参与方分类， 区块链可以分为： 公开链<br>（Public Blockchain） 、 联盟链（Consortium<br>Blockchain） 和私有链（Private Blockchain） 。 从链与<br>链的关系来分， 可以分为主链和侧链。 而且， 不同区<br>块链还可以形成网络， 网络中链与链的互联互通， 产<br>生互联链（Interchain） 的概念。 比特币和以太坊都属于公有链范畴。EOS顶多属于联盟链，私有链暂未发现，“超级账本”（Hyperledger） 的开源项目也属于联盟链，感兴趣的可以搜索一下相关项目，做一下详细了解。</p><h1 id="区块链的定义："><a href="#区块链的定义：" class="headerlink" title="区块链的定义："></a>区块链的定义：</h1><p>区块链本质上是一个对等网络（peer-to-peer） 的<br>分布式账本数据库。 比特币的底层就采用了区块链的<br>技术架构。 区块链本身其实是一串链接的数据区块，<br>其链接指针是采用密码学哈希算法对区块头进行处理<br>所产生的区块头哈希值。 每一个数据块中记录了一组<br>采用哈希算法组成的树状交易状态信息， 这样保证了<br>每个区块内的交易数据不可篡改， 区块链里链接的区<br>块也不可篡改。</p><h1 id="区块链的特点："><a href="#区块链的特点：" class="headerlink" title="区块链的特点："></a>区块链的特点：</h1><ol><li>去中心化</li><li>公正性和透明性</li><li>防伪、 防篡改</li><li>准匿名性</li><li>全网共识机制</li><li>交易可追溯</li><li>状态全网记录</li><li>安全性</li><li>合约自动执行</li><li>低成本及高效率</li></ol>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一个通用的顶部导航栏布局</title>
      <link href="/2018/07/05/%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E7%9A%84%E9%A1%B6%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%B8%83%E5%B1%80/"/>
      <url>/2018/07/05/%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E7%9A%84%E9%A1%B6%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>在Android开发中，一个activity界面通常都会有一个顶部导航栏，有的是，左边一个返回按钮，中间一个标题，有的，右边还要几个文字，或者一个图标，更有甚者，左边有一个返回图标加几个文字，这种设计在android屡见不鲜，为了减少重复代码，我特别封装了一个控件<a href="https://github.com/wypeng2012/commontopbar" target="_blank" rel="noopener">commontopbar</a></p><p>git地址：<a href="https://github.com/wypeng2012/commontopbar" target="_blank" rel="noopener">https://github.com/wypeng2012/commontopbar</a></p><blockquote><p>欢迎star和提出问题</p></blockquote><h2 id="效果图如下："><a href="#效果图如下：" class="headerlink" title="效果图如下："></a>效果图如下：</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/imgs/commontopbar.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h3><ol><li><p>在xml里面使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;party.loveit.commontopbar.CommonTopBar</span><br><span class="line">         android:id=&quot;@+id/common&quot;</span><br><span class="line">         android:layout_width=&quot;match_parent&quot;</span><br><span class="line">         android:layout_height=&quot;48dp&quot;</span><br><span class="line">         android:background=&quot;@color/top_bar_bg_color&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>你的activity实现一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommonTopBarClick</span> </span>&#123;</span><br><span class="line">          <span class="function"><span class="keyword">void</span> <span class="title">onClickLeft</span><span class="params">()</span></span>;<span class="comment">//click left view on CommonTopBar</span></span><br><span class="line">          <span class="function"><span class="keyword">void</span> <span class="title">onClickRight</span><span class="params">()</span></span>;<span class="comment">//click right view on CommonTopBar</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>设置监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mCommonTopBar = (CommonTopBar) findViewById(R.id.common);</span><br><span class="line"> mCommonTopBar.setCommonTopBarClick(<span class="keyword">this</span>);<span class="comment">//of course you can not set it</span></span><br></pre></td></tr></table></figure></li><li><p>显示或者隐藏view</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mCommonTopBar.isShowLeftView(<span class="keyword">true</span>);</span><br><span class="line">mCommonTopBar.isShowRightView(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></li><li><p>设置文字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">setLeftText(CharSequence charSequence) <span class="comment">//set left view text</span></span><br><span class="line"> setLeftText(<span class="keyword">int</span> textRes) <span class="comment">//set left view text</span></span><br><span class="line">  </span><br><span class="line"> setMidText(CharSequence charSequence) <span class="comment">//set mid view text</span></span><br><span class="line"> setMidText(<span class="keyword">int</span> textRes) <span class="comment">//set mid view text</span></span><br><span class="line">  </span><br><span class="line"> setRightText(CharSequence charSequence) <span class="comment">//set right view text</span></span><br><span class="line"> setRightText(<span class="keyword">int</span> textRes) <span class="comment">//set right view text</span></span><br></pre></td></tr></table></figure></li><li><p>设置图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">setLeftImage(android.graphics.drawable.Drawable drawable) <span class="comment">//set left image</span></span><br><span class="line">setLeftImage(<span class="keyword">int</span> drawableRes) <span class="comment">//set left image</span></span><br><span class="line"> </span><br><span class="line">setRightImage(android.graphics.drawable.Drawable drawable) <span class="comment">//set right image</span></span><br><span class="line">setRightImage(<span class="keyword">int</span> drawableRes) <span class="comment">//set right image</span></span><br></pre></td></tr></table></figure></li><li><p>设置文字大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">setLeftTextSize(<span class="keyword">float</span> size) <span class="comment">//set left text size</span></span><br><span class="line">    </span><br><span class="line">setMidTextSize(<span class="keyword">float</span> size) <span class="comment">//set mid text size</span></span><br><span class="line">    </span><br><span class="line">setRightTextSize(<span class="keyword">float</span> size) <span class="comment">//set right text size</span></span><br></pre></td></tr></table></figure></li><li><p>设置文字颜色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">setLeftTextColor(android.content.res.ColorStateList colorStateList) <span class="comment">//set left text color</span></span><br><span class="line">setLeftTextColor(<span class="keyword">int</span> color) <span class="comment">//set left text color</span></span><br><span class="line"> </span><br><span class="line">setMidTextColor(android.content.res.ColorStateList colorStateList) <span class="comment">//set mid text color</span></span><br><span class="line"> setMidTextColor(<span class="keyword">int</span> color) <span class="comment">//set mid text color</span></span><br><span class="line"> </span><br><span class="line">setRightText(<span class="keyword">int</span> textRes) <span class="comment">//set right view text</span></span><br><span class="line">setRightTextColor(android.content.res.ColorStateList colorStateList) <span class="comment">//set right text color</span></span><br></pre></td></tr></table></figure></li><li><p>添加margin</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">addLeftMargin(<span class="keyword">float</span> marginLeft) <span class="comment">//set left view margin left,the param is dp</span></span><br><span class="line">addRightMargin(<span class="keyword">float</span> marginRight) <span class="comment">//set right view margin right,the param is dp</span></span><br></pre></td></tr></table></figure></li><li><p>设置中间title的字数长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">setMidTextMaxLenth(<span class="keyword">int</span> lenth) <span class="comment">//set middle text max length</span></span><br></pre></td></tr></table></figure></li><li><p>设置左边文字左边的图标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">setLefTextViewDrawPadding(<span class="keyword">int</span> size) ；<span class="comment">//set DrawPadding</span></span><br><span class="line">setLeftTextViewDrawLeft(<span class="meta">@DrawableRes</span> <span class="keyword">int</span> drawableRes)；<span class="comment">//set left drawImg</span></span><br><span class="line">setLeftTextViewDrawLeft(<span class="meta">@NonNull</span> Drawable drawableRes)；<span class="comment">//set left drawImg</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="如何远程依赖："><a href="#如何远程依赖：" class="headerlink" title="如何远程依赖："></a>如何远程依赖：</h3><ol><li>Maven</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;party.loveit&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commontopbarlibrary&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0.1&lt;/version&gt;</span><br><span class="line">  &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>Gradle</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;party.loveit:commontopbarlibrary:1.0.1&apos;</span><br></pre></td></tr></table></figure><ol start="3"><li>Ivy</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency org=&apos;party.loveit&apos; name=&apos;commontopbarlibrary&apos; rev=&apos;1.0.1&apos;&gt;</span><br><span class="line">  &lt;artifact name=&apos;$AID&apos; ext=&apos;pom&apos;&gt;&lt;/artifact&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> android开源库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
